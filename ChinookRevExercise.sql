--------------------------------------------------------------------------
- OUR WORK
--------------------------------------------------------------------------
--All records in a table

SET SERVEROUTPUT ON;

SELECT *
FROM CHINOOK.EMPLOYEE;

--Selecting the employee King
SELECT *
FROM CHINOOK.EMPLOYEE
WHERE LASTNAME = 'King';

SELECT *
FROM CHINOOK.EMPLOYEE
WHERE FIRSTNAME = 'Andrew' AND REPORTSTO IS NULL;

SELECT *
FROM CHINOOK.ALBUM
ORDER BY ALBUM.TITLE DESC;

SELECT EMPLOYEE.FIRSTNAME, EMPLOYEE.CITY
FROM CHINOOK.EMPLOYEE
ORDER BY CITY ASC;

SELECT *
FROM CHINOOK.INVOICE
WHERE BILLINGADDRESS LIKE 'T%';

INSERT INTO CHINOOK.GENRE VALUES (26, 'TrapSoul');
INSERT INTO CHINOOK.GENRE VALUES (27, 'Lo-Fi Beats');

INSERT INTO CHINOOK.EMPLOYEE VALUES (9, 'Smith', 'Albert', 'Assistant to General Manager', 1, DATE '1992-10-04', DATE '2015-02-16', '316 Rotum Avenue', 'Calgary', 'AB', 'Canada', 'T2P 5M5', '+1 (781) 411-9232', '+1 (781) 411-9232', 'albert@chinookcorp.com');
INSERT INTO CHINOOK.EMPLOYEE VALUES (10, 'Roku', 'Avatar', 'Head of Design', 3, DATE '1980-04-30', DATE '2000-07-14', '1717 Krakun Drive', 'Calgary', 'AB', 'Canada', 'T2P 5M5', '+1 (701) 451-1235', '+1 (701) 411-1222', 'avatar@chinookcorp.com');

INSERT INTO CHINOOK.CUSTOMER VALUES (60, 'Allen', 'Cozu', null, '417 Ezolun Drive', 'Calgary', 'AB', 'Canada', 'T2P 5M5', '+1 (444) 411-3265', '+1 (444) 123-4571', 'cozuallen@email.com', 4);
INSERT INTO CHINOOK.CUSTOMER VALUES (61, 'Gary', 'Olu', null, '639 Ori Lane', 'Calgary', 'AB', 'Canada', 'T2P 5M5', '+1 (714) 092-4102', '+1 (714) 321-4221', 'garyolu@email.com', 2);

UPDATE CHINOOK.CUSTOMER SET FIRSTNAME = 'Robert', LASTNAME = 'Walker'
WHERE FIRSTNAME = 'Aaron' AND LASTNAME = 'Mitchell';

UPDATE CHINOOK.ARTIST SET NAME = 'CCR'
WHERE NAME = 'Creedence Clearwater Revival';

SELECT CHINOOK.CUSTOMER.FIRSTNAME, CHINOOK.CUSTOMER.LASTNAME, CHINOOK.INVOICE.INVOICEID
FROM CHINOOK.CUSTOMER
JOIN CHINOOK.INVOICE
ON CUSTOMER.CUSTOMERID = INVOICE.CUSTOMERID;

--OUTER JOIN
SELECT CHINOOK.CUSTOMER.CUSTOMERID, CHINOOK.CUSTOMER.FIRSTNAME, CHINOOK.CUSTOMER.LASTNAME, CHINOOK.INVOICE.INVOICEID, CHINOOK.INVOICE.TOTAL
FROM CHINOOK.CUSTOMER
FULL JOIN CHINOOK.INVOICE
ON CUSTOMER.CUSTOMERID = INVOICE.CUSTOMERID;

--RIGHT JOIN
SELECT CHINOOK.ARTIST.NAME, CHINOOK.ALBUM.TITLE
FROM CHINOOK.ARTIST
RIGHT JOIN CHINOOK.ALBUM
ON ARTIST.ARTISTID = ALBUM.ARTISTID;

--CROSS JOIN

SELECT CHINOOK.ARTIST.ARTISTID, CHINOOK.ARTIST.NAME, CHINOOK.ALBUM.TITLE
FROM CHINOOK.ARTIST
CROSS JOIN CHINOOK.ALBUM;

--SELF JOIN EMPLOYEE ONTO REPORTSTO
SELECT E1.FIRSTNAME, E1.LASTNAME, E2.FIRSTNAME AS MANAGER
FROM CHINOOK.EMPLOYEE E1, CHINOOK.EMPLOYEE E2
WHERE E1.REPORTSTO = E2.EMPLOYEEID;

--JOINED QUERIES
SELECT CONCAT(C.FIRSTNAME,C.LASTNAME) AS FULL_NAME, SUM(CHINOOK.INVOICE.TOTAL) AS TOTAL
FROM CHINOOK.CUSTOMER C
JOIN CHINOOK.INVOICE
ON C.CUSTOMERID = INVOICE.CUSTOMERID
GROUP BY C.FIRSTNAME, C.LASTNAME
ORDER BY FULL_NAME DESC;

--Employee with highest total value of sales
SELECT E.FIRSTNAME, E.LASTNAME, SUM(CHINOOK.INVOICE.TOTAL) AS TOTAL
FROM CHINOOK.EMPLOYEE E
INNER JOIN CHINOOK.CUSTOMER C
ON E.EMPLOYEEID = C.SUPPORTREPID
INNER JOIN CHINOOK.INVOICE
ON C.CUSTOMERID = INVOICE.CUSTOMERID
GROUP BY E.FIRSTNAME, E.LASTNAME
ORDER BY TOTAL DESC
FETCH FIRST ROW ONLY;

--total purchases per genre in order of most popular genre
SELECT G.NAME, SUM(INVOICELINE.QUANTITY) AS TOTAL_PURCHASES
FROM CHINOOK.GENRE G
INNER JOIN CHINOOK.TRACK
ON G.GENREID = TRACK.GENREID
INNER JOIN CHINOOK.INVOICELINE
ON TRACK.TRACKID = INVOICELINE.TRACKID
GROUP BY G.NAME
ORDER BY TOTAL_PURCHASES DESC;

--SUM of purchases per genre (I did this additionally by accident)
SELECT G.NAME, SUM(INVOICELINE.UNITPRICE * INVOICELINE.QUANTITY) AS PURCHASETOTAL 
FROM CHINOOK.GENRE G
INNER JOIN CHINOOK.TRACK
ON G.GENREID = TRACK.GENREID
INNER JOIN CHINOOK.INVOICELINE
ON TRACK.TRACKID = INVOICELINE.TRACKID
GROUP BY G.NAME
ORDER BY PURCHASETOTAL DESC;

------------------------------------------------------------------------
-- ADDING SQL FUNCTIONS
------------------------------------------------------------------------
CREATE OR REPLACE FUNCTION RETURNTIME
RETURN VARCHAR2
IS
BEGIN
    RETURN CURRENT_TIMESTAMP;
END;
/

BEGIN
    DBMS_OUTPUT.PUT_LINE (RETURNTIME());
END;
/


--  SELECT LENGTH(CHINOOK.MEDIATYPE.NAME)
--  FROM CHINOOK.MEDIATYPE 

CREATE OR REPLACE FUNCTION NAMELENGTH(S IN VARCHAR2)
RETURN NUMBER
IS
BEGIN
    RETURN LENGTH(S);
END;
/

SELECT NAMELENGTH(NAME)
FROM CHINOOK.MEDIATYPE;

CREATE OR REPLACE FUNCTION NAMELENGTH(N IN CHINOOK.MEDIATYPE.MEDIATYPEID%TYPE)
RETURN NUMBER
IS
NAMEL NUMBER;
BEGIN
    SELECT LENGTH(NAME) INTO NAMEL 
    FROM CHINOOK.MEDIATYPE
    WHERE MEDIATYPEID = N;
    RETURN NAMEL;
END;
/

BEGIN
    DBMS_OUTPUT.PUT_LINE(NAMELENGTH(1));
END;
/

--average total of all invoices -- ATTEMPT WITH CURSOR
CREATE OR REPLACE FUNCTION AVGTOTAL
    RETURN SYS_REFCURSOR
IS
    S SYS_REFCURSOR;
BEGIN
    OPEN S FOR
        SELECT AVG(CHINOOK.INVOICE.TOTAL)
        FROM CHINOOK.INVOICE;
    RETURN S;
END;
/

DECLARE
    S SYS_REFCURSOR;
    TEMP_AVG CHINOOK.INVOICE.TOTAL%TYPE;
BEGIN
    S:= AVGTOTAL();
    LOOP
        FETCH S INTO TEMP_AVG;
        EXIT WHEN S%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE(TEMP_AVG||' IS THE AVERAGE TOTAL OF ALL INVOICES');
    END LOOP;
    CLOSE S;
END;
/

--average total of all invoices
CREATE OR REPLACE FUNCTION THEAVGTOTAL
RETURN NUMBER
IS
AVGTOT NUMBER;
BEGIN
    SELECT AVG(TOTAL) INTO AVGTOT
    FROM CHINOOK.INVOICE;
    RETURN AVGTOT;
END;
/

BEGIN
    DBMS_OUTPUT.PUT_LINE(THEAVGTOTAL());
END;
/

--MOST EXPENSIVE TRACK
CREATE OR REPLACE FUNCTION MOSTEXP
RETURN NUMBER
IS
EXPTRACK NUMBER;
BEGIN
    SELECT MAX(UNITPRICE) INTO EXPTRACK
    FROM CHINOOK.TRACK;
    RETURN EXPTRACK;
END;
/

BEGIN
    DBMS_OUTPUT.PUT_LINE(MOSTEXP());
END;
/

--invoice avg with scalar
CREATE OR REPLACE FUNCTION CALCAVG
RETURN NUMBER
IS
MYSUM NUMBER := 0;
MYCOUNT NUMBER := 0;
MYAVG NUMBER;
BEGIN
    FOR unitp IN (SELECT UNITPRICE FROM CHINOOK.INVOICELINE)
        LOOP
            MYSUM := MYSUM + unitp.unitprice;
            MYCOUNT := MYCOUNT +1;
        END LOOP;
    MYAVG := MYSUM/MYCOUNT;
    RETURN MYAVG;
END;
/

BEGIN
    DBMS_OUTPUT.PUT_LINE(CALCAVG());
END;
/

--invoice avg without scalar
CREATE OR REPLACE FUNCTION INVOICEAVG
RETURN NUMBER
IS
AVGNUM NUMBER;
BEGIN
    SELECT AVG(UNITPRICE) INTO AVGNUM
    FROM CHINOOK.INVOICELINE;
    RETURN AVGNUM;
END;
/

BEGIN
    DBMS_OUTPUT.PUT_LINE(INVOICEAVG());
END;
/

--employee birthdate > 1968
CREATE OR REPLACE FUNCTION EMPPOST1968
    RETURN SYS_REFCURSOR
IS
    S SYS_REFCURSOR;
BEGIN
    OPEN S FOR
    SELECT E.LASTNAME, E.FIRSTNAME, E.BIRTHDATE
    FROM CHINOOK.EMPLOYEE E
    WHERE BIRTHDATE > DATE '1968-12-31';
    RETURN S;
END;
/

DECLARE
    S SYS_REFCURSOR;
    TEMP_LN CHINOOK.EMPLOYEE.LASTNAME%TYPE;
    TEMP_FN CHINOOK.EMPLOYEE.FIRSTNAME%TYPE;
    TEMP_BD CHINOOK.EMPLOYEE.BIRTHDATE%TYPE;
BEGIN
    S:= EMPPOST1968();
    LOOP
        FETCH S INTO TEMP_LN, TEMP_FN, TEMP_BD;
        EXIT WHEN S%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE(TEMP_FN||' '||TEMP_LN||' BIRTHDAY IS '||TEMP_BD);
    END LOOP;
    CLOSE S;
END;
/

--------------------------------------------------------------
--SOME PROCEDURAL WORK
--------------------------------------------------------------
CREATE OR REPLACE PROCEDURE EMPNAMES(S OUT SYS_REFCURSOR)
IS
BEGIN
    OPEN S FOR
    SELECT E.FIRSTNAME, E.LASTNAME FROM CHINOOK.EMPLOYEE E;
END;
/

DECLARE
    SVAR SYS_REFCURSOR;
    TEMP_FN CHINOOK.EMPLOYEE.FIRSTNAME%TYPE;
    TEMP_LN CHINOOK.EMPLOYEE.LASTNAME%TYPE;
BEGIN
    EMPNAMES(SVAR);
    LOOP
        FETCH SVAR INTO TEMP_FN, TEMP_LN;
        EXIT WHEN SVAR%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE(TEMP_FN||' '||TEMP_LN);
    END LOOP;
    CLOSE SVAR;
END;
/

--updating an employee account
CREATE OR REPLACE PROCEDURE UPDATE_EMPLOYEE(S OUT SYS_REFCURSOR)
IS
BEGIN
    OPEN S FOR
        SELECT CHINOOK.EMPLOYEE.FIRSTNAME FROM CHINOOK.EMPLOYEE;
END;
/

DECLARE
    SVAR SYS_REFCURSOR;
    FN CHINOOK.EMPLOYEE.FIRSTNAME%TYPE;
BEGIN
    UPDATE CHINOOK.EMPLOYEE
    SET FIRSTNAME = 'Terry'
    WHERE EMPLOYEEID = 7;
    UPDATE_EMPLOYEE(SVAR);
    FETCH SVAR INTO FN;
    CLOSE SVAR;
END;
/



DECLARE
    SVAR SYS_REFCURSOR;
    TEMP_FN VARCHAR2(20);
BEGIN
    UPDATE_EMPLOYEE(

--RETURN MANAGERS OF EMPLOYEES
CREATE OR REPLACE PROCEDURE GETMANAGERS(S OUT SYS_REFCURSOR, EMP IN NUMBER)
IS
BEGIN
    OPEN S FOR
        SELECT E1.FIRSTNAME
        FROM CHINOOK.EMPLOYEE E1
        WHERE EMPLOYEEID =
            (SELECT E1.REPORTSTO
            FROM CHINOOK.EMPLOYEE E1
            WHERE EMPLOYEEID = EMP);
END;
/

DECLARE
    SVAR SYS_REFCURSOR;
    TEMP_FN CHINOOK.EMPLOYEE.FIRSTNAME%TYPE;
BEGIN
    GETMANAGERS(SVAR, 7);
    LOOP
        FETCH SVAR INTO TEMP_FN;
        EXIT WHEN SVAR%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE(TEMP_FN||' is the manager of the employee you input.');
    END LOOP;
    CLOSE SVAR;
END;
/

--returning name and company of customer
CREATE OR REPLACE PROCEDURE COMP_INFO(S OUT SYS_REFCURSOR, THE_ID IN CHINOOK.CUSTOMER.CUSTOMERID%TYPE)
IS
BEGIN
    OPEN S FOR
        SELECT C.CUSTOMERID, C.FIRSTNAME, C.LASTNAME, C.COMPANY
        FROM CHINOOK.CUSTOMER C
        WHERE CUSTOMERID = THE_ID;
END;
/

DECLARE
    SVAR SYS_REFCURSOR;
    TEMP_ID CHINOOK.CUSTOMER.CUSTOMERID%TYPE;
    TEMP_FN CHINOOK.CUSTOMER.FIRSTNAME%TYPE;
    TEMP_LN CHINOOK.CUSTOMER.LASTNAME%TYPE;
    TEMP_COMP CHINOOK.CUSTOMER.COMPANY%TYPE;
BEGIN
    COMP_INFO(SVAR, 5);
    LOOP
        FETCH SVAR INTO TEMP_ID, TEMP_FN, TEMP_LN, TEMP_COMP;
        EXIT WHEN SVAR%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE('Customer '||TEMP_ID||' -- '||TEMP_FN||' '||TEMP_LN||' works at '||TEMP_COMP);
    END LOOP;
    CLOSE SVAR;
END;
/

--------------------------------------------------------------
--TRANSACTIONS
--------------------------------------------------------------

--Deleting an invoice requires us to delete the invoiceID in Invoice as well as Invoiceline
CREATE OR REPLACE PROCEDURE DELETE_INVOICE(INVID IN CHINOOK.INVOICE.INVOICEID%TYPE)
IS
BEGIN
    DELETE FROM CHINOOK.INVOICELINE
    WHERE INVOICEID = INVID;
    DELETE FROM CHINOOK.INVOICE
    WHERE INVOICEID = INVID;
    COMMIT;
END;
/

BEGIN
    DELETE_INVOICE(216);
END;
/

--Transaction that inserts a new record in Customer
--Creating a sequence to increment the customer id when procedure is run
CREATE SEQUENCE CUST_SEQ
START WITH 62
INCREMENT BY 1;

CREATE OR REPLACE PROCEDURE ADDCUST(CUSTFN IN CHINOOK.CUSTOMER.FIRSTNAME%TYPE, CUSTLN IN CHINOOK.CUSTOMER.LASTNAME%TYPE, 
    CUSTCOMPANY IN CHINOOK.CUSTOMER.COMPANY%TYPE, CUSTADDY IN CHINOOK.CUSTOMER.ADDRESS%TYPE, CUSTCITY IN CHINOOK.CUSTOMER.CITY%TYPE,
    CUSTSTATE IN CHINOOK.CUSTOMER.STATE%TYPE, CUSTCOUNTRY IN CHINOOK.CUSTOMER.COUNTRY%TYPE, CUSTPC IN CHINOOK.CUSTOMER.POSTALCODE%TYPE,
    CUSTPHONE IN CHINOOK.CUSTOMER.PHONE%TYPE, CUSTFAX IN CHINOOK.CUSTOMER.FAX%TYPE, CUSTEMAIL IN CHINOOK.CUSTOMER.EMAIL%TYPE,
    CUSTSUPPORTREPID IN CHINOOK.CUSTOMER.SUPPORTREPID%TYPE)
IS
BEGIN
    INSERT INTO CHINOOK.CUSTOMER(CUSTOMERID, FIRSTNAME, LASTNAME, COMPANY, ADDRESS, CITY, STATE, COUNTRY, POSTALCODE, PHONE,
    FAX, EMAIL, SUPPORTREPID) VALUES (CUST_SEQ.nextval, CUSTFN, CUSTLN, CUSTCOMPANY, CUSTADDY, CUSTCITY, CUSTSTATE, CUSTCOUNTRY, CUSTPC, 
    CUSTPHONE, CUSTFAX, CUSTEMAIL, CUSTSUPPORTREPID);
END;
/

BEGIN
    ADDCUST('Bob', 'Ross', 'Target', '111 Street street', 'Charlotte', 'NC', 'USA', 27606, (704)-111-1111, (704)-111-1111, 'bobross@gmail.com', 1);
END;
/

--SOME TRIGGERS
--a trigger that fires after employee is created
CREATE OR REPLACE TRIGGER NEWEMP
AFTER INSERT ON CHINOOK.EMPLOYEE
FOR EACH ROW
BEGIN
    DBMS_OUTPUT.PUT_LINE('HOORAY! WE ADDED A NEW EMPLOYEE!');
END;
/

--UPDATE TRIGGER FOR ALBUM TABLE
CREATE OR REPLACE TRIGGER ALBUM_UPDATE
AFTER UPDATE ON CHINOOK.ALBUM
FOR EACH ROW
BEGIN
    DBMS_OUTPUT.PUT_LINE('WE HAVE UPDATED THE ALBUMS TABLE. A NEW ROW WAS INSERTED.');
END;
/

--TRIGGER FOR CUSTOMER TABLE AFTER DELETE
CREATE OR REPLACE TRIGGER CUST_DELETE
AFTER DELETE ON CHINOOK.CUSTOMER
FOR EACH ROW
BEGIN
    DBMS_OUTPUT.PUT_LINE('A CUSTOMER HAS BEEN DELETED.');
END;
/
