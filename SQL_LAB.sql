--2.1 (a) SELECTS ALL RECORDS FROM EMPLOYEE TABLE
SELECT *
FROM CHINOOK.EMPLOYEE;

--2.1(b) SELECT ALL RECORDS FROM EMPLOYEE WHERE THE LAST NAME IS 'King'
SELECT *
FROM CHINOOK.EMPLOYEE
WHERE LASTNAME = 'King';

/*2.1 (c) SELECT ALL RECORDS FROM THE EMPLOYEE TABLE WHERE FIRSTNAME IS 'Andrew'
and 'RESPORTISO' IS NULL*/
SELECT *
FROM CHINOOK.EMPLOYEE
WHERE REPORTSTO IS NULL;

--2.1 (d) GET ALL ALBUM IS THE ALBUMS TABLE AND SORT IN DESC ORDER BY TITLE
SELECT *
FROM CHINOOK.ALBUM
ORDER BY TITLE DESC;

--2.1 (e) SELECT FIRSTNAME FROM CUSTOMER AND SORT THE RESULT IN ASC ORDER
SELECT FIRSTNAME
FROM CHINOOK.CUSTOMER
ORDER BY CITY ASC;

--2.1 (f) SELECT ALL INVOICES WITH BILLING ADDRESS LIKE "T%"
SELECT *
FROM CHINOOK.INVOICE
WHERE BILLINGADDRESS LIKE 'T%';

--2.3 (a) INSERT TWO NEW RECORDS INTO THE GENRE TABLE
INSERT INTO CHINOOK.GENRE VALUES(26, 'WESTERN');
INSERT INTO CHINOOK.GENRE VALUES(27, 'CARTOON');

--2.3(b) INSERT TWO RECORDS INTO EMPLOYEE TABLE
INSERT INTO CHINOOK.EMPLOYEE VALUES(9, 'Jones', 'Bill', 'IT Staff', 6, DATE '1983-06-06', DATE '2003-04-06', '569 Williaby Dive', 'Lethbridge', 'AB', 'Canada', 'T1H 5N8', '+1 (403) 465-4879', '+1 (403) 901-4879', 'email@chinookcorp.com');
INSERT INTO CHINOOK.EMPLOYEE VALUES(10, 'Kobb', 'Reily', 'IT Staff', 6, DATE '1980-03-20', DATE '2002-01-17', '5 West Roundabout', 'Lethbridge', 'AB', 'Canada', 'T1H 5N8', '+1 (403) 708-4879', '+1 (403) 723-4879', 'jeffyj@chinookcorp.com');

--2.3(b) INSERT TWO RECORDS INTO CUSTOMER TABLE
INSERT INTO CHINOOK.CUSTOMER VALUES(60, 'Jeff', 'Joe', 'That Company', '8984 Turnabout Road', 'Chicago', 'Illinois','United States', '65201', '+1 (515) 578-5948', '+1 (515) 965-4989', 'snihohn@foih.com', 3);
INSERT INTO CHINOOK.CUSTOMER VALUES(61, 'Billy', 'Ure', 'efe', '48 West Jones', 'Wee', 'Minnisota', 'United States', '6595', '+1 (515) 678-5048', '+1 (515) 005-4989', 'sween@fohh.com', 4);

--2.4 (a) Update Aaron Mitchell to Robert Walter
UPDATE CHINOOK.CUSTOMER
SET FIRSTNAME = 'Robert', LASTNAME = 'Walter'
WHERE LASTNAME = 'Mitchell';

--2.4 (b) Updates the artist name to the abbrevation CCR
UPDATE CHINOOK.ARTIST
SET NAME = 'CCR'
WHERE NAME = 'Creedence Clearwater Revival';

--3.0 Joins

--3.1 Inner Join
--3.1 (a) Create an Inner Join with customers and orders that include the name and inovieid
SELECT C.FIRSTNAME, C.LASTNAME, INVOICEID
FROM CHINOOK.CUSTOMER C
INNER JOIN CHINOOK.INVOICE I
ON C.CUSTOMERID = I.CUSTOMERID;

--3.2 Outer Join
--3.2 (a) joins customer and invoice table, with customerid, firstname, lastname, invoiceid, and total
SELECT C.CUSTOMERID, C.FIRSTNAME, C.LASTNAME, I.INVOICEID, I.TOTAL
FROM CHINOOK.CUSTOMER C
FULL OUTER JOIN CHINOOK.INVOICE I
ON C.CUSTOMERID = I.CUSTOMERID;

--3.3 Right Join
--3.3 (a) Create a cross join that joins album and artist and sorts by artist name in ascending order
SELECT L.NAME, A.TITLE
FROM CHINOOK.ALBUM A
RIGHT OUTER JOIN CHINOOK.ARTIST L
ON A.ARTISTID = L.ARTISTID;


--3.4 CROSS JOIN WITH ALBUM AND ARTIST, ORDER BY ASC ON ARTIST NAME
--3.4 (a)
SELECT *
FROM CHINOOK.ALBUM A
CROSS JOIN CHINOOK.ARTIST L
ORDER BY L.NAME ASC;
--DONT NEED AN ON TABLE SINCE IT IS USING ALL RECORDS IN BOTH TABLES, THEN ORDER BY ARTIST(L) NAME IN ASCENDING(ASC) ORDER

--3.5 SELF JOIN
--3.5 (a)
SELECT *
FROM CHINOOK.EMPLOYEE E1, CHINOOK.EMPLOYEE E2
WHERE E1.EMPLOYEEID = E2.REPORTSTO;

--3.6 JOINED QUERIES
--3.6 (a) query shows the customer name and total amount spent
SELECT C.FIRSTNAME, C.LASTNAME, SUM(I.TOTAL)
FROM CHINOOK.CUSTOMER C
INNER JOIN CHINOOK.INVOICE I
ON C.CUSTOMERID = I.CUSTOMERID
GROUP BY C.FIRSTNAME, C.LASTNAME;

--3.6 (b) query that shows employee that has made the highest amount of sales(number of invoices)
SELECT E.EMPLOYEEID, COUNT(I.INVOICEID) AS SALES_AMOUNT
FROM CHINOOK.INVOICE I
INNER JOIN CHINOOK.CUSTOMER C
ON I.CUSTOMERID = C.CUSTOMERID
INNER JOIN CHINOOK.EMPLOYEE E
ON C.SUPPORTREPID = E.EMPLOYEEID
GROUP BY E.EMPLOYEEID
ORDER BY SALES_AMOUNT DESC
FETCH FIRST 1 ROWS ONLY;

--3.6(c) create query that show the number of purchases per each genre. display name of genre, and number of purchases desc order
SELECT G.NAME, COUNT(G.GENREID) AS PURCHASES
FROM CHINOOK.GENRE G
JOIN CHINOOK.TRACK T
ON G.GENREID = T.GENREID
JOIN CHINOOK.INVOICELINE I
ON T.TRACKID = I.TRACKID
GROUP BY G.NAME
ORDER BY PURCHASES DESC;

--SERVER OUTPUT
SET SERVEROUTPUT ON;
--4.0 SQL FUNCTIONS
--4.1 SYSTEM DEFINED FUNCITONS
--4.1(a) - return a funciton that returns current time
CREATE OR REPLACE FUNCTION RETURN_TIME
RETURN VARCHAR2
IS
BEGIN
    RETURN CURRENT_TIMESTAMP;
END;
/

BEGIN
    DBMS_OUTPUT.PUT_LINE(RETURN_TIME);
END;
/


--4.1(b)
CREATE OR REPLACE FUNCTION NAME_LENGTH(NAME_ID IN CHINOOK.MEDIATYPE.MEDIATYPEID%TYPE)
RETURN NUMBER
IS
MEDIANAME NUMBER;
BEGIN
    SELECT LENGTH(NAME) INTO MEDIANAME
    FROM CHINOOK.MEDIATYPE 
    WHERE NAME_ID = MEDIATYPEID;
    RETURN MEDIANAME;
END;
/

BEGIN
    DBMS_OUTPUT.PUT_LINE(NAME_LENGTH(1));
END;
/

--4.2(a) -Create a function that will average the total of all invoices
CREATE OR REPLACE FUNCTION AVG_INVOICES
RETURN NUMBER
IS
AVG_INVOICE NUMBER;
BEGIN
    SELECT AVG(TOTAL) INTO AVG_INVOICE
    FROM CHINOOK.INVOICE;
    RETURN ROUND(AVG_INVOICE, 2);
END;
/

BEGIN
    DBMS_OUTPUT.PUT_LINE(AVG_INVOICES());
END;
/

--4.2(b) - Create a function that returns the most expensive track
CREATE OR REPLACE FUNCTION MOST_EXP_TRACK
RETURN NUMBER
IS
MAX_PRICE NUMBER;
BEGIN
    SELECT MAX(UNIT_PRICE) INTO MAX_PRICE FROM CHINOOK.TRACK;
    RETURN MAX_PRICE;
END;
/

BEGIN
    DBMS_OUTPUT.PUT_LINE(AVG_INVOICES());
END;
/

SELECT NAME FROM TRACK WHERE UNITPRICE = MOST_EXP_TRACK();


--4.3 USER DEFINED SCALAR FUNCTION
CREATE OR REPLACE FUNCTION AVG_UNITPRICE
RETURN NUMBER
IS
SUM_PRICE NUMBER;
UNIT_COUNT NUMBER;
AVERAGE NUMBER(5,2);
BEGIN
SELECT COUNT(UNITPRICE), SUM(UNITPRICE) INTO UNIT_COUNT, SUM_PRICE FROM CHINOOK.INVOICELINE;
    AVERAGE := SUM_PRICE/UNIT_COUNT;
    RETURN AVERAGE;
END;
/

BEGIN
    DBMS_OUTPUT.PUT_LINE(AVG_UNITPRICE());
END;
/

--4.4(b) USER DEFINED TABLE VALUED FUNCTIONS
--create a funciton that will return all employees who are born after 1968


CREATE OR REPLACE FUNCTION BORN_AFTER_DATE
RETURN SYS_REFCURSOR
IS
BORN_AFTER SYS_REFCURSOR;
BEGIN
    OPEN BORN_AFTER FOR
        SELECT BIRTHDATE, FIRSTNAME, LASTNAME FROM CHINOOK.EMPLOYEE WHERE BIRTHDATE > '31-DEC-68';
    RETURN BORN_AFTER;
END;
/

DECLARE
    BORN_AFTER SYS_REFCURSOR := BORN_AFTER_DATE;
    TEMP_BIRTHDAY CHINOOK.EMPLOYEE.BIRTHDATE%TYPE;
    TEMP_FIRSTNAME CHINOOK.EMPLOYEE.FIRSTNAME%TYPE;
    TEMP_LASTNAME CHINOOK.EMPLOYEE.LASTNAME%TYPE;
BEGIN
    LOOP
        FETCH BORN_AFTER INTO TEMP_BIRTHDAY, TEMP_FIRSTNAME, TEMP_LASTNAME;
        EXIT WHEN BORN_AFTER%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE('BIRTHDAY: '||TEMP_BIRTHDAY||', NAME: '||TEMP_FIRSTNAME||' '||TEMP_LASTNAME);
    END LOOP;
    CLOSE BORN_AFTER;
END;
/

--5.0  STORED PROCEDURES

--5.1 BASIC STORED PROCEDURE
--MAKE A PROCEDURE THAT RETURNS THE FULL NAME OF EACH EMPLOYEE

--CURSOR THAT WILL HELP RUN THROUGH EACH RECORD AND GET THE FIRST AND LAST NAME FOR THE EMPLOYEE
CREATE OR REPLACE PROCEDURE GET_FULL_NAMES(NAMES OUT SYS_REFCURSOR)
IS
BEGIN
    OPEN NAMES FOR
    SELECT EMPLOYEE.FIRSTNAME, EMPLOYEE.LASTNAME
    FROM CHINOOK.EMPLOYEE;
END;
/

DECLARE
    NAMES SYS_REFCURSOR;
    TEMP_FIRSTNAME CHINOOK.EMPLOYEE.FIRSTNAME%TYPE;
    TEMP_LASTNAME CHINOOK.EMPLOYEE.LASTNAME%TYPE;
BEGIN
    GET_FULL_NAMES(NAMES);
    LOOP
        FETCH NAMES INTO TEMP_FIRSTNAME, TEMP_LASTNAME;
        EXIT WHEN NAMES%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE('EMPLOYEE NAME: '||TEMP_FIRSTNAME||' '||TEMP_LASTNAME);
    END LOOP;
    CLOSE NAMES;
END;
/

--5.2 STORED PROCEDURE INPUT PARAMETERS

--5.2(a)STORED PROCECURE THAT WILL UPDATE PERSONAL INFORMATION OF AN EMPLOYEE

CREATE OR REPLACE PROCEDURE UPDATE_PERSONAL(EMP_ID IN CHINOOK.EMPLOYEE.EMPLOYEEID%TYPE, EMP_LASTNAME IN CHINOOK.EMPLOYEE.LASTNAME%TYPE)
IS
BEGIN
    UPDATE CHINOOK.EMPLOYEE
    SET CHINOOK.EMPLOYEE.LASTNAME = EMP_LASTNAME
--    , FIRSTNAME = EMP_FIRSTNAME, TITLE = EMP_TITLE, REPORTSTO = EMP_REPORTSTO
    WHERE CHINOOK.EMPLOYEE.EMPLOYEEID = EMP_ID;
END;
/

BEGIN
    UPDATE_PERSONAL(1, 'Doge', 'Malroy', 'Dog', NULL);
END;
/



--                                            EMP_FIRSTNAME IN CHINOOK.EMPLOYEE.FIRSTNAME%TYPE,
--                                            EMP_TITLE IN CHINOOK.EMPLOYEE.TITLE%TYPE,
--                                            EMP_REPORTSTO IN CHINOOK.EMPLOYEE.REPORTSTO%TYPE
--     EMP_BIRTHDATE IN CHINOOK.EMPLOYEE.BIRTHDATE%TYPE;
--     EMP_HIREDATE CHINOOK.EMPLOYEE.HIREDATE%TYPE;
--     EMP_ADDRESS CHINOOK.EMPLOYEE.ADDRESS%TYPE;
--     EMP_CITY CHINOOK.EMPLOYEE.CITY%TYPE;
--     EMP_STATE CHINOOK.EMPLOYEE.HIREDATE%TYPE;
--     EMP_COUNTRY CHINOOK.EMPLOYEE.HIREDATE%TYPE;
--     EMP_POSTALCODE CHINOOK.EMPLOYEE.POSTALCODE%TYPE;
--     EMP_PHONE CHINOOK.EMPLOYEE.PHONE%TYPE;
--     EMP_FAX CHINOOK.EMPLOYEE.FAX%TYPE;
--     EMP_EMAIL CHINOOK.EMPLOYEE.EMAIL%TYPE;

--5.2 (b) return the managers of an employee

CREATE OR REPLACE PROCEDURE EMP_MANAGER(MANAGER OUT SYS_REFCURSOR)
IS
BEGIN
    OPEN MANAGER FOR
    SELECT E1.EMPLOYEEID, E2.FIRSTNAME, E2.LASTNAME 
    FROM CHINOOK.EMPLOYEE E1, CHINOOK.EMPLOYEE E2
    WHERE E2.EMPLOYEEID = E1.REPORTSTO;
END;
/

DECLARE
    MANAGER SYS_REFCURSOR;
    TEMP_EMPLOYEEID CHINOOK.EMPLOYEE.EMPLOYEEID%TYPE;
    TEMP_FIRSTNAME CHINOOK.EMPLOYEE.LASTNAME%TYPE;
    TEMP_LASTNAME CHINOOK.EMPLOYEE.FIRSTNAME%TYPE;
BEGIN
    EMP_MANAGER(MANAGER);
    LOOP
        FETCH MANAGER INTO TEMP_EMPLOYEEID, TEMP_FIRSTNAME, TEMP_LASTNAME;
        EXIT WHEN MANAGER%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE('EMPLOYEE: '||TEMP_EMPLOYEEID||' AND, MANAGER: '||TEMP_FIRSTNAME||' '||TEMP_LASTNAME);
    END LOOP;
    CLOSE MANAGER;
END;
/

--5.3 STORED PROCEDURE OUTPUT PARAMETERS
--5.3(a)create a stored procedure that returns the name and company of a customer
CREATE OR REPLACE PROCEDURE GET_CUSTOMER_INFO(CUST_ID IN CHINOOK.CUSTOMER.CUSTOMERID%TYPE)
IS
TEMP_ID CHINOOK.CUSTOMER.CUSTOMERID%TYPE;
TEMP_FIRST CHINOOK.CUSTOMER.FIRSTNAME%TYPE;
TEMP_LAST CHINOOK.CUSTOMER.LASTNAME%TYPE;
TEMP_COMPANY CHINOOK.CUSTOMER.COMPANY%TYPE;
BEGIN
    SELECT CUSTOMERID, FIRSTNAME, LASTNAME, COMPANY INTO TEMP_ID, TEMP_FIRST, TEMP_LAST, TEMP_COMPANY
    FROM CHINOOK.CUSTOMER
    WHERE CUSTOMERID = CUST_ID;
    DBMS_OUTPUT.PUT_LINE('CUSTOMER ID: '||TEMP_ID||' CUSTOMER NAME: '||TEMP_FIRST||' '||TEMP_LAST||' COMPANY: '||TEMP_COMPANY);
END;
/

BEGIN
    GET_CUSTOMER_INFO(1);
END;
/

--6.0 TRANSACTIONS

--6.0(a) transaction that given a invoiceId will need to alter foreign keys in other table inorder to delete
ALTER TABLE CHINOOK.INVOICELINE
DROP CONSTRAINT FK_INVOICELINEINVOICEID;

ALTER TABLE CHINOOK.INVOICE
DROP CONSTRAINT FK_INVOICECUSTOMERID;


CREATE OR REPLACE PROCEDURE DELETE_INVOICE(INVOICE_ID IN CHINOOK.INVOICE.INOVICEID%TYPE)
IS
BEGIN
    DELETE 
    FROM CHINOOK.INVOICE
    WHERE INVOICEID = INVOICE_ID;
END;
/

CREATE OR REPLACE PROCEDURE ADD_CUSTOMER(CUST OUT SYS_REFCURSOR)
IS
BEGIN
    OPEN CUST FOR
    SELECT CUSTOMERID, FIRSTNAME, LASTNAME, COMPANY, ADDRESS, CITY, STATE,COUNTRY, POSTALCODE, PHONE, FAX, EMAIL, SUPPORTREPID
    FROM CHINOOK.CUSTOMER;
END;
/

DECLARE
    CUST SYS_REFCURSOR;
    TEMP_ID CHINOOK.CUSTOMER.CUSTOMERID%TYPE;
    TEMP_FIRST CHINOOK.CUSTOMER.FIRSTNAME%TYPE;
    TEMP_LAST CHINOOK.CUSTOMER.LASTNAME%TYPE;
    TEMP_COMPANY CHINOOK.CUSTOMER.COMPANY%TYPE;
    TEMP_ADDRESS CHINOOK.CUSTOMER.ADDRESS%TYPE;
    TEMP_CITY CHINOOK.CUSTOMER.CITY%TYPE;
    TEMP_STATE CHINOOK.CUSTOMER.STATE%TYPE;
    TEMP_COUNTRY CHINOOK.CUSTOMER.COUNTRY%TYPE;
    TEMP_ZIP CHINOOK.CUSTOMER.POSTALCODE%TYPE;
    TEMP_PHONE CHINOOK.CUSTOMER.PHONE%TYPE;
    TEMP_FAX CHINOOK.CUSTOMER.FAX%TYPE;
    TEMP_EMAIL CHINOOK.CUSTOMER.EMAIL%TYPE;
    TEMP_SUPPORTREP CHINOOK.CUSTOMER.SUPPORTREPID%TYPE;
BEGIN
    INSERT INTO CHINOOK.CUSTOMER VALUES (62, 'Dan', 'Jeffy', 'boo store', '1414 street', 'Chicago', 'Illinois', 'United States', '48165', '+1 (515) 156-1564', '+1 (515) 135-4596', 'djdngo@yosa.com', 3);
    ADD_CUSTOMER(CUST);
    FETCH CUST INTO TEMP_ID, TEMP_FIRST, TEMP_LAST, TEMP_COMPANY, TEMP_ADDRESS, TEMP_CITY, TEMP_STATE, TEMP_COUNTRY, TEMP_ZIP, TEMP_PHONE, TEMP_FAX, TEMP_EMAIL, TEMP_SUPPORTREP;
    CLOSE CUST;
END; 
/


--7.0 TRIGGERS 

--7.1(a) after insert trigger on the employee table after a new record is inserted into the table
CREATE OR REPLACE TRIGGER ON_EMPLOYEE_INSERT
AFTER UPDATE ON CHINOOK.EMPLOYEE
FOR EACH ROW
BEGIN
    DBMS_OUTPUT.PUT_LINE('NEW EMPLOYEE HAS BEEN ADDED');
END;
/

UPDATE CHINOOK.ALBUM
SET TITLE = 'ELECTRIC SLIDE'
WHERE ALBUMID = 23;

--7.1(b) after update trigger on the album table after a row is inserted
CREATE OR REPLACE TRIGGER ON_RECORD_INSERT
AFTER INSERT ON CHINOOK.ALBUM
FOR EACH ROW
BEGIN
    DBMS_OUTPUT.PUT_LINE('NEW RECORD HAS BEEN ADDED');
END;
/


--7.1(c) after delete trigger on the customer table after a row is deleted from the table
CREATE OR REPLACE TRIGGER ON_CUSTOMER_DELETE
AFTER DELETE ON CHINOOK.CUSTOMER
FOR EACH ROW
BEGIN
    DBMS_OUTPUT.PUT_LINE('CUSTOMER HAS BEEN REMOVED');
END;
/

DELETE
FROM CHINOOK.CUSTOMER
WHERE CUSTOMERID = 3;
