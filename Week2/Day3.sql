----------------------------------------
-- VIEWS
----------------------------------------
CREATE VIEW DEPARTMENT_SPENDING AS
SELECT D.DEPT_NAME, SUM(E.MONTHLY_SALARY) AS TOTAL
FROM DEPARTMENT D
JOIN EMPLOYEE E
ON E.DEPT_ID = D.DEPT_ID
GROUP BY D.DEPT_NAME;

SELECT *
FROM DEPARTMENT_SPENDING;

UPDATE EMPLOYEE
SET MONTHLY_SALARY = 2200
WHERE EMP_ID = 6;

COMMIT;

-------------------------------------
-- WORKING WITH FUNCTIONS
-------------------------------------
-- HELLO WORLD FUNCTION
SET SERVEROUTPUT ON;

BEGIN 
    DBMS_OUTPUT.PUT_LINE('HELLO WORLD');
END;
/

CREATE OR REPLACE FUNCTION SAY_HI
RETURN VARCHAR2
IS
BEGIN 
    RETURN 'HELLO WORLD FROM SQL DEVELOPER!!!';
END;
/

BEGIN 
    DBMS_OUTPUT.PUT_LINE(SAY_HI());
END;
/

CREATE OR REPLACE FUNCTION RETURN_NAME
RETURN VARCHAR2
IS
BEGIN 
    RETURN 'JOHN SMITH';
END;
/

SELECT *
FROM EMPLOYEE
WHERE EMP_NAME = RETURN_NAME();

RETURN_NAME();

SELECT RETURN_NAME();

SELECT RETURN_NAME() FROM DUAL;

SELECT 5 AS MY_NUM FROM DUAL;

DROP FUNCTION SAY_HI;

-- CREATE A FUNCTION WHICH TAKES A SINGLE NUMERIC INPUT AND RETURNS THE SQUARED VALUE OF THAT NUMBER
CREATE OR REPLACE FUNCTION SQUARE(X IN NUMBER)
RETURN NUMBER
IS
BEGIN
    RETURN X*X;
END;
/

DECLARE 
    N NUMBER:=5;
BEGIN
    DBMS_OUTPUT.PUT_LINE(SQUARE(N));
END;
/

SELECT 5 AS MY_NUM, SQUARE(5) AS MY_NUM_SQUARED FROM DUAL;

SELECT SQUARE(MONTHLY_SALARY)
FROM EMPLOYEE
WHERE EMP_ID=10;

-- DECLARING ADDITIONAL VALUES TO BE USED IN OUR FUNCTION
CREATE OR REPLACE FUNCTION SQUARE(X IN NUMBER)
RETURN NUMBER
IS
--ANY OTHER VARIABLES
Y NUMBER;
BEGIN
    Y := X*X;
    RETURN Y;
END;
/

-- FIND MAX BETWEEN TWO NUMERIC VARIABLES
CREATE OR REPLACE FUNCTION FIND_MAX(X NUMBER, Y NUMBER)
RETURN NUMBER
IS
Z NUMBER;
BEGIN 
    IF X>Y THEN
    Z := X;
    ELSE 
    Z := Y;
    END IF;
    RETURN Z;
END;
/

DECLARE 
    FIRST_NUM NUMBER;
    SECOND_NUM NUMBER;
    MAX_NUM NUMBER;
BEGIN 
    FIRST_NUM := 54;
    SECOND_NUM := 32;
    MAX_NUM := FIND_MAX(FIRST_NUM, SECOND_NUM);
    DBMS_OUTPUT.PUT_LINE('MAX: '||MAX_NUM);
END;
/

CREATE OR REPLACE FUNCTION APPLY_TAX(PRE_TAX IN NUMBER)
RETURN NUMBER
IS
POST_TAX NUMBER;
BEGIN 
    POST_TAX := (.80)*PRE_TAX;
    RETURN POST_TAX;
END;
/

SELECT EMP_NAME, MONTHLY_SALARY AS PRETAX, APPLY_TAX(MONTHLY_SALARY) AS POSTTAX
FROM EMPLOYEE;

CREATE OR REPLACE FUNCTION APPLY_TAX(PRE_TAX IN NUMBER)
RETURN NUMBER
IS
POST_TAX NUMBER;
BEGIN 
    IF 10000<PRE_TAX THEN
        POST_TAX := (.50)*PRE_TAX;
    ELSIF 3000<PRE_TAX THEN
        POST_TAX := (.71)*PRE_TAX;
    ELSIF 2000<PRE_TAX THEN
        POST_TAX := (.75)*PRE_TAX;
    ELSE 
        POST_TAX := (.78)*PRE_TAX;
    END IF;
    RETURN POST_TAX;
END;
/

-------------------------------------
-- CREATING STORED PROCEDURES
-------------------------------------
CREATE OR REPLACE PROCEDURE SAY_HI_PROCEDURE
IS
BEGIN 
    DBMS_OUTPUT.PUT_LINE('HELLO WORLD');
END;
/

BEGIN
    SAY_HI_PROCEDURE();
END;
/

-- CREATE A PROCEDURE WHICH HAS AN OUTPUT PARAMETER OF A CURSOR
-- A CURSOR IS A POINTER TO A CONTEXT AREA, WHICH IS ESSENTIALLY A RESULT SET
-- IN THIS CASE OUR PROCEDURE WILL BE SAVING THE RESULT OF A QUERY ON OUR EMPLOYEE TABLE INTO OUR CURSOR
-- CURSORS ARE OFTEN USED TO STORE AND PROCESS QUERIED DATA
CREATE OR REPLACE PROCEDURE GET_ALL_EMPLOYEES(S OUT SYS_REFCURSOR)
IS
BEGIN 
    OPEN S FOR
    SELECT EMP_ID, EMP_NAME FROM EMPLOYEE ORDER BY EMP_ID;
END;
/

DECLARE
    SVAR SYS_REFCURSOR;
    TEMP_ID EMPLOYEE.EMP_ID%TYPE;
    TEMP_NAME EMPLOYEE.EMP_NAME%TYPE;
BEGIN 
    GET_ALL_EMPLOYEES(SVAR);
    LOOP
        FETCH SVAR INTO TEMP_ID, TEMP_NAME;
        EXIT WHEN SVAR%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE(TEMP_ID||' IS CURRENT ID, '||TEMP_NAME||' IS CURRENT NAME');
    END LOOP;
    CLOSE SVAR;
END;
/






