-- 2.1 SELECT
--A
SELECT * FROM CHINOOK.EMPLOYEE;
--B
SELECT * FROM CHINOOK.EMPLOYEE WHERE EMPLOYEE.LASTNAME = 'King';
--C
SELECT * FROM CHINOOK.EMPLOYEE WHERE EMPLOYEE.FIRSTNAME = 'Andrew' AND EMPLOYEE.REPORTSTO IS NULL;
--D
SELECT * FROM CHINOOK.ALBUM  ORDER BY  ALBUM.TITLE DESC;
--E
SELECT CUSTOMER.FIRSTNAME FROM CHINOOK.CUSTOMER ORDER BY CUSTOMER.CITY ASC;
--F
SELECT * FROM CHINOOK.INVOICE WHERE INVOICE.BILLINGADDRESS LIKE 'T%';
--2.2 INSERT INTO
--A
SELECT * FROM CHINOOK.GENRE;
INSERT INTO CHINOOK.GENRE VALUES(26,'JPOP');
INSERT INTO CHINOOK.GENRE VALUES(27,'KPOP');
--B
SELECT * FROM CHINOOK.EMPLOYEE;
INSERT INTO CHINOOK.EMPLOYEE VALUES(9,'Peyton','Shriver','CO-CEO',NULL,DATE '1997-01-14',DATE '2019-01-14','121 Penny Lane','Lethbridge','AB','Canada','T1H 1Y8','+1 (333) 333-3333','+1 (222) 222-2222','peyton@chinookcorp.com');
INSERT INTO CHINOOK.EMPLOYEE VALUES(10,'Elizabeth','Shriver','CO-CEO',NULL,DATE '2000-05-03',DATE '2019-01-14','121 Penny Lane','Lethbridge','AB','Canada','T1H 1Y8','+1 (333) 333-3333','+1 (222) 222-2222','lizzie@chinookcorp.com');
--C
SELECT * FROM CHINOOK.CUSTOMER;
INSERT INTO CHINOOK.CUSTOMER VALUES(60,'Heath','Ledger',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'THEONLYRELEVANTJOKER@THETRUTH.COM',NULL);
INSERT INTO CHINOOK.CUSTOMER VALUES(61,'Bruce','Wayne',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'GEORGECLOONEYISNOTMYBATMAN@THETRUTH.COM',NULL);
--2.3 UPDATE
--A
UPDATE CHINOOK.CUSTOMER SET FIRSTNAME = 'Robert', LASTNAME = 'Walker' WHERE CUSTOMERID = 32;
--B
UPDATE CHINOOK.ARTIST SET CHINOOK.ARTIST.NAME = 'CCR' WHERE CHINOOK.ARTIST.NAME = 'Creedence Clearwater Revival';
--3.0 JOINS
--3.1 INNER 
SELECT CUSTOMER.FIRSTNAME,CUSTOMER.LASTNAME, INVOICE.INVOICEID FROM CHINOOK.CUSTOMER JOIN CHINOOK.INVOICE ON CUSTOMER.CUSTOMERID=INVOICE.CUSTOMERID;
--3.2 OUTER JOIN
SELECT CUSTOMER.CUSTOMERID, CUSTOMER.FIRSTNAME,CUSTOMER.LASTNAME,INVOICE.INVOICEID, INVOICE.TOTAL FROM CHINOOK.CUSTOMER FULL OUTER JOIN CHINOOK.INVOICE ON CUSTOMER.CUSTOMERID=INVOICE.CUSTOMERID ORDER BY INVOICE.INVOICEID ASC;
--3.3 RIGHT JOIN
SELECT ARTIST.NAME, ALBUM.TITLE FROM CHINOOK.ALBUM RIGHT JOIN CHINOOK.ARTIST ON ARTIST.ARTISTID = ALBUM.ARTISTID;
--3.4 CROSS JOIN
SELECT * FROM CHINOOK.ALBUM CROSS JOIN CHINOOK.ARTIST WHERE ARTIST.ARTISTID = ALBUM.ARTISTID ORDER BY ARTIST.NAME ASC;
--3.5 SELF JOIN
SELECT * FROM CHINOOK.EMPLOYEE SELF JOIN CHINOOK.EMPLOYEE ON EMPLOYEE.REPORTSTO= EMPLOYEE.REPORTSTO;
--3.6 JOINED QUERIES
--A
SELECT T1.FULL_NAME, T2.TOTAL 
FROM 
    (SELECT CONCAT(CUSTOMER.FIRSTNAME,CONCAT(' ', CUSTOMER.LASTNAME))AS FULL_NAME, CUSTOMER.CUSTOMERID AS CID 
        FROM CHINOOK.CUSTOMER)"T1" 
JOIN 
    (SELECT INVOICE.CUSTOMERID AS CID,SUM(INVOICE.TOTAL)AS TOTAL 
        FROM CHINOOK.INVOICE GROUP BY INVOICE.CUSTOMERID ORDER BY INVOICE.CUSTOMERID)"T2" 
ON T1.CID=T2.CID 
ORDER BY T1.FULL_NAME DESC;
--B EMPLOYEE WITH HIGHEST TOTAL VALUE OF SALES

SELECT CONCAT(EMPLOYEE.FIRSTNAME,CONCAT(' ',EMPLOYEE.LASTNAME)), T3.S_TOTAL
FROM CHINOOK.EMPLOYEE JOIN (SELECT SUM(TA.TOTAL)AS S_TOTAL, TB.SUPPORTREPID AS S_ID FROM CHINOOK.INVOICE TA JOIN CHINOOK.CUSTOMER TB  ON TA.CUSTOMERID = TB.CUSTOMERID GROUP BY TB.SUPPORTREPID)"T3"
ON EMPLOYEE.EMPLOYEEID = T3.S_ID ORDER BY S_TOTAL DESC FETCH FIRST ROW ONLY;
--C 
SELECT GENRE.NAME, T2.NUM_TRACKS_PURCHASED FROM CHINOOK.GENRE JOIN (SELECT A.GENREID AS GENREID, COUNT(B.QUANTITY)AS NUM_TRACKS_PURCHASED FROM CHINOOK.TRACK A JOIN CHINOOK.INVOICELINE B ON A.TRACKID= B.TRACKID GROUP BY A.GENREID)"T2" ON GENRE.GENREID = T2.GENREID ORDER BY T2.NUM_TRACKS_PURCHASED DESC;
--4.0 FUNCTIONS
--4.1 SYSTEM DEFINED FUNCTIONS
--A
SET SERVEROUTPUT ON;
CREATE OR REPLACE FUNCTION GETTHETIME
RETURN VARCHAR2
IS
BEGIN -- TIME AT THE INTERNATIONAL DATELINE
 RETURN TO_CHAR(SYSTIMESTAMP, 'HH24.MI.SS ');
END;
/
BEGIN
    DBMS_OUTPUT.PUT_LINE(GETTHETIME());
END;
/
--B
CREATE OR REPLACE FUNCTION GETMEDIATYPENAMELENGTH
RETURN NUMBER
IS
BEGIN
    DECLARE MNML NUMBER;
    BEGIN
    SELECT DATA_LENGTH INTO MNML FROM ALL_TAB_COLUMNS WHERE UPPER(TABLE_NAME) = 'MEDIATYPE' AND UPPER(COLUMN_NAME) = 'NAME';
    RETURN MNML;
    END;
END;
/
BEGIN
    DBMS_OUTPUT.PUT_LINE(GETMEDIATYPENAMELENGTH());
END;
/
--4.2 SYSTEM DEFINED AGGREGATE FUNCTIONS
--A
CREATE OR REPLACE FUNCTION GETAVGTOTALOFINVOICE
RETURN NUMBER
IS
BEGIN
    DECLARE AVGTOTAL NUMBER;
    BEGIN
    SELECT AVG(TOTAL) INTO AVGTOTAL FROM CHINOOK.INVOICE;
    RETURN AVGTOTAL;
    END;
END;
/
BEGIN
    DBMS_OUTPUT.PUT_LINE(GETAVGTOTALOFINVOICE());
END;
/
SELECT TOTAL FROM CHINOOK.INVOICE;
--B
CREATE OR REPLACE FUNCTION GETMAXTRACK
RETURN CHINOOK.TRACK.NAME%TYPE
IS
MAXTRACK CHINOOK.TRACK.NAME%TYPE;
BEGIN
    SELECT TRACK.NAME INTO MAXTRACK FROM CHINOOK.TRACK WHERE UNITPRICE=(SELECT MAX(TRACK.UNITPRICE)FROM CHINOOK.TRACK FETCH FIRST ROW ONLY)FETCH FIRST ROW ONLY;
    RETURN MAXTRACK;
END;
/
BEGIN
    DBMS_OUTPUT.PUT_LINE(GETMAXTRACK());
END;
/
-- 4.3 USER DEFINED SCALAR FUNCTION
CREATE OR REPLACE FUNCTION GETAVGINVLINEPRICE
RETURN NUMBER
IS
SUMINVOICE NUMBER :=0;
LINE_NUMBER NUMBER;
TRACKER NUMBER :=0;
REFCUR1 SYS_REFCURSOR;
BEGIN
    
    OPEN REFCUR1 FOR SELECT UNITPRICE FROM CHINOOK.INVOICELINE;
    LOOP
        FETCH REFCUR1 INTO LINE_NUMBER;
        EXIT WHEN REFCUR1%NOTFOUND;
        TRACKER := TRACKER +1;
        SUMINVOICE := SUMINVOICE+LINE_NUMBER;
    END LOOP;
    CLOSE REFCUR1;
    RETURN SUMINVOICE/TRACKER;
END;
/
BEGIN
    DBMS_OUTPUT.PUT_LINE(GETAVGINVLINEPRICE());
END;
/
--SELECT AVG(UNITPRICE) FROM CHINOOK.INVOICELINE;

--4.4 USER DEFINED TABLE VALUED FUNCTIONS
CREATE OR REPLACE FUNCTION GETEMPAFTER68
RETURN SYS_REFCURSOR
IS
REFCUR1 SYS_REFCURSOR;
BEGIN
    OPEN REFCUR1 FOR SELECT EMPLOYEEID,LASTNAME,FIRSTNAME,TITLE,REPORTSTO,BIRTHDATE FROM CHINOOK.EMPLOYEE WHERE BIRTHDATE > DATE'1968-12-31';
    RETURN REFCUR1;
END;
/
SELECT * FROM CHINOOK.EMPLOYEE WHERE BIRTHDATE > DATE'1968-12-31';
DECLARE
REF1 SYS_REFCURSOR;
R_EMP_ID CHINOOK.EMPLOYEE.EMPLOYEEID%TYPE;
R_EMP_LNAME CHINOOK.EMPLOYEE.LASTNAME%TYPE;
R_EMP_FNAME CHINOOK.EMPLOYEE.FIRSTNAME%TYPE;
R_EMP_TITLE CHINOOK.EMPLOYEE.TITLE%TYPE;
R_EMP_REPORTSTO CHINOOK.EMPLOYEE.REPORTSTO%TYPE;
R_EMP_BIRTHDATE CHINOOK.EMPLOYEE.BIRTHDATE%TYPE;
BEGIN
    REF1:= GETEMPAFTER68();
    LOOP
        FETCH REF1 INTO R_EMP_ID,R_EMP_LNAME,R_EMP_FNAME,R_EMP_TITLE,R_EMP_REPORTSTO,R_EMP_BIRTHDATE;
        EXIT WHEN REF1%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE(R_EMP_ID||' '||R_EMP_LNAME||' '||R_EMP_FNAME||' '||R_EMP_TITLE||' '||R_EMP_REPORTSTO||' '||R_EMP_BIRTHDATE);
    END LOOP;
    CLOSE REF1;
END; -- I KEPT THE CONTENTS SIMPLE FOR READABILLITY BY OMMITTING INFORMATION AFTER BIRTHDAY FROM THE RESULTS
/
--5.0 Stored Procedures
-- 5.1 Basic
CREATE OR REPLACE PROCEDURE SEL_EMPLOYEES(REFC1 OUT SYS_REFCURSOR)
IS
BEGIN
    OPEN REFC1 FOR SELECT FIRSTNAME, LASTNAME FROM CHINOOK.EMPLOYEE;
END SEL_EMPLOYEES;
/
DECLARE
REF1 SYS_REFCURSOR;
R_EMP_LNAME CHINOOK.EMPLOYEE.LASTNAME%TYPE;
R_EMP_FNAME CHINOOK.EMPLOYEE.FIRSTNAME%TYPE;

BEGIN
    SEL_EMPLOYEES(REF1);
    LOOP
        FETCH REF1 INTO R_EMP_LNAME,R_EMP_FNAME;
        EXIT WHEN REF1%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE(R_EMP_FNAME||' '||R_EMP_LNAME);
    END LOOP;
    CLOSE REF1;
END;
/
--5.2 INPUT PARAMETERS
--A
SELECT * FROM CHINOOK.EMPLOYEE A WHERE A.EMPLOYEEID=10;
CREATE OR REPLACE PROCEDURE UPDATEEMPLOYEE(EMPID IN CHINOOK.EMPLOYEE.EMPLOYEEID%TYPE,
LN IN CHINOOK.EMPLOYEE.LASTNAME%TYPE DEFAULT NULL,
FN IN CHINOOK.EMPLOYEE.FIRSTNAME%TYPE DEFAULT NULL)
IS
BEGIN
UPDATE EMPLOYEE
SET 
    LASTNAME = NVL(LN,LASTNAME),
    FIRSTNAME = NVL(FN,FIRSTNAME)
WHERE EMPLOYEE.EMPLOYEEID= EMPID; 
COMMIT;
--INVALID NUMBER OF ARGUMENTS CAUSED BY LINE WITH STATE BEING IGNORED....NOT SURE WHY
END;
/
BEGIN
UPDATEEMPLOYEE(10,'Shriver','Elizabeth');
END;
/
--B
CREATE OR REPLACE PROCEDURE MANAGEROFEMP (REF1 OUT SYS_REFCURSOR, EMPID IN CHINOOK.EMPLOYEE.EMPLOYEEID%TYPE)
IS
BEGIN
    OPEN REF1 FOR SELECT (EMPLOYEEID||' '||LASTNAME||' '||FIRSTNAME||' '||TITLE||' '||REPORTSTO||' '||BIRTHDATE||' '||HIREDATE||' '||ADDRESS||' '||CITY||' '||STATE||' '||COUNTRY||' '||POSTALCODE||' '||PHONE||' '||FAX||' '||EMAIL)AS EMPSTRING FROM CHINOOK.EMPLOYEE A WHERE A.EMPLOYEEID =(SELECT REPORTSTO FROM CHINOOK.EMPLOYEE B WHERE B.EMPLOYEEID= EMPID);
END MANAGEROFEMP;
/
DECLARE
REFM SYS_REFCURSOR;
EMPID CHINOOK.EMPLOYEE.EMPLOYEEID%TYPE := 3;
EMPSTRING VARCHAR2(400);
BEGIN
    MANAGEROFEMP(REFM,EMPID);
    FETCH REFM INTO EMPSTRING;
    DBMS_OUTPUT.PUT_LINE(EMPSTRING);
END;
/
--5.3 OUTPUT PARAMETERS
CREATE OR REPLACE PROCEDURE NAMEANDCOMPANYCUS( REF1 OUT SYS_REFCURSOR)
IS
BEGIN
    OPEN REF1 FOR SELECT (FIRSTNAME||' '||LASTNAME||' '||COMPANY) AS NAMEANDCOMPANY FROM CHINOOK.CUSTOMER;
END NAMEANDCOMPANYCUS;
/
DECLARE
REF1 SYS_REFCURSOR;
R_NAME_COMPANY VARCHAR2(200);
BEGIN
    NAMEANDCOMPANYCUS(REF1);
    LOOP
        FETCH REF1 INTO R_NAME_COMPANY;
        EXIT WHEN REF1%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE(R_NAME_COMPANY);
    END LOOP;
    CLOSE REF1;
END;
/
--6.0 TRANSACTIONS
SELECT * FROM CHINOOK.INVOICE;
--A
CREATE OR REPLACE PROCEDURE DELINVOICE( IID IN CHINOOK.INVOICE.INVOICEID%TYPE)
IS
BEGIN
   DELETE FROM CHINOOK.INVOICELINE
    WHERE INVOICEID = IID;
    DELETE FROM CHINOOK.INVOICE
    WHERE INVOICEID = IID;
    COMMIT;
END;
/
BEGIN
DELINVOICE(111);
END;
/
--B
SELECT * FROM CHINOOK.CUSTOMER;
CREATE OR REPLACE PROCEDURE INSNEWCUS ( CID IN CHINOOK.CUSTOMER.CUSTOMERID%TYPE, FNAME IN CHINOOK.CUSTOMER.FIRSTNAME%TYPE, LNAME IN CHINOOK.CUSTOMER.LASTNAME%TYPE, EML IN CHINOOK.CUSTOMER.EMAIL%TYPE)
IS
BEGIN
INSERT INTO CHINOOK.CUSTOMER (CUSTOMERID,FIRSTNAME,LASTNAME,EMAIL) VALUES (CID,FNAME,LNAME,EML);
COMMIT;
END;
/
BEGIN
INSNEWCUS(1111,'REGGI','JOHNSON','RJ@AOL.COM');
END;
/
--7.0 TRIGGERS
--7.1 AFTER/FOR
CREATE OR REPLACE TRIGGER NEWEMP
AFTER INSERT ON CHINOOK.EMPLOYEE
FOR EACH ROW
BEGIN
DBMS_OUTPUT.PUT_LINE('EMPLOYEE INSERTED');
END;
/
INSERT INTO CHINOOK.EMPLOYEE (EMPLOYEEID,FIRSTNAME,LASTNAME) VALUES(12,'DEL','ME');
--B
CREATE OR REPLACE TRIGGER UPALBUM
AFTER UPDATE ON CHINOOK.ALBUM
FOR EACH ROW
BEGIN 
DBMS_OUTPUT.PUT_LINE('ALBUM UPDATED');
END;
/
UPDATE CHINOOK.ALBUM SET TITLE = 'F.T.A.T.R.W.S.Y.' WHERE ALBUMID=1 ;
SELECT * FROM CHINOOK.ALBUM WHERE ALBUMID =1;
--C
CREATE OR REPLACE TRIGGER DELCUST
AFTER DELETE ON CHINOOK.CUSTOMER
FOR EACH ROW
BEGIN
DBMS_OUTPUT.PUT_LINE('CUSTOMER DELETED');
END;
/
DELETE FROM CUSTOMER WHERE CUSTOMERID=1111;
