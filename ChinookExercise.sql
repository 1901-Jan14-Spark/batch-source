--2.1A
SELECT *
FROM CHINOOK.EMPLOYEE;

--2.1B
SELECT *
FROM CHINOOK.EMPLOYEE
WHERE LASTNAME='King';
--2.1C
SELECT *
FROM CHINOOK.EMPLOYEE
WHERE FIRSTNAME='Andrew' and REPORTSTO IS NULL;
--2.1D
SELECT *
FROM CHINOOK.ALBUM
ORDER BY TITLE DESC;
--2.1E
SELECT FIRSTNAME, CITY
FROM CHINOOK.CUSTOMER
ORDER BY CITY;
--2.1F
SELECT *
FROM CHINOOK.INVOICE
WHERE BILLINGADDRESS LIKE 'T%';
--2.2A
INSERT INTO CHINOOK.GENRE VALUES(26, 'Texas Country');
INSERT INTO CHINOOK.GENRE VALUES(27, '90s');
--2.2B
INSERT INTO CHINOOK.EMPLOYEE VALUES(9, 'Joe', 'Chilek', 'IT Staff', 5, DATE'1972-02-07', DATE'1968-06-03', '514 West DR.', 'Edmonton', 'AB', 'Canada', 'T5G 2D8', '+1 (403) 143-2845', '+1 (403) 143-2563', 'JoeC@chinookcorp.com');
INSERT INTO CHINOOK.EMPLOYEE VALUES(10, 'Travis', 'Kvinta', 'Sales Support Staff', 3, DATE'1965-08-23', DATE'2003-8-28', '2545 Cow Road', 'Lethbridge', 'AB', 'Canada', 'T1B 4K3', '+1 (403) 428-4586', '+1 (403) 428-7742', 'Travinta@chinookcorp.com');
--2.2C
INSERT INTO CHINOOK.CUSTOMER VALUES(60, 'John', 'Richards', null, '1325 Freedom ST.', 'Dallas', 'TX', 'USA', '77995', '+1 (361) 524-7834', null, 'JohnyRich@gmail.com',  3); 
INSERT INTO CHINOOK.CUSTOMER VALUES(61, 'Frank', 'Castle', null, '1256 Gator ST.', 'Baton Rouge', 'LA', 'USA', '25638', '+1 (378) 216-4536', null, 'ThePun@gmail.com',  5); 
--2.3A
UPDATE CHINOOK.CUSTOMER
SET FIRSTNAME='Robert', LASTNAME='Walter'
WHERE CUSTOMERID=32;
--2.3B
UPDATE CHINOOK.ARTIST
SET NAME='CCR'
WHERE ARTISTID=76;
--3.1A
SELECT CONCAT(CHINOOK.CUSTOMER.FIRSTNAME, CONCAT(' ', CHINOOK.CUSTOMER.LASTNAME)) AS CUSTOMER_NAME, CHINOOK.INVOICE.*
FROM CHINOOK.INVOICE
JOIN CHINOOK.CUSTOMER
ON CHINOOK.INVOICE.CUSTOMERID = CHINOOK.CUSTOMER.CUSTOMERID;
--3.2A
SELECT CHINOOK.CUSTOMER.CUSTOMERID, CHINOOK.CUSTOMER.FIRSTNAME, CHINOOK.CUSTOMER.LASTNAME, CHINOOK.INVOICE.INVOICEID, CHINOOK.INVOICE.TOTAL
FROM CHINOOK.INVOICE
FULL JOIN CHINOOK.CUSTOMER
ON CHINOOK.INVOICE.CUSTOMERID = CHINOOK.CUSTOMER.CUSTOMERID;
--3.3A
SELECT CHINOOK.ARTIST.NAME, CHINOOK.ALBUM.TITLE 
FROM CHINOOK.ARTIST
RIGHT JOIN CHINOOK.ALBUM
ON CHINOOK.ARTIST.ARTISTID = CHINOOK.ALBUM.ARTISTID;
--3.4A
SELECT CHINOOK.ARTIST.NAME, CHINOOK.ALBUM.TITLE 
FROM CHINOOK.ARTIST
CROSS JOIN CHINOOK.ALBUM
ORDER BY chinook.artist.name;
3.5A
SELECT CONCAT(CHINOOK.E1.FIRSTNAME, CONCAT(' ' , CHINOOK.E1.LASTNAME)) AS EMPLOYEE, CONCAT(CHINOOK.E2.FIRSTNAME, CONCAT(' ', CHINOOK.E2.LASTNAME)) AS MANAGER
FROM CHINOOK.EMPLOYEE E1, CHINOOK.EMPLOYEE E2
WHERE E1.REPORTSTO=E2.EMPLOYEEID;
3.6A
SELECT  CONCAT(CHINOOK.CUSTOMER.FIRSTNAME, CONCAT(' ', CHINOOK.CUSTOMER.LASTNAME)) AS FULL_NAME, SUM(CHINOOK.INVOICE.TOTAL) AS GRAND_TOTAL
FROM CHINOOK.INVOICE
JOIN CHINOOK.CUSTOMER
ON CHINOOK.CUSTOMER.CUSTOMERID = CHINOOK.INVOICE.CUSTOMERID
GROUP BY CONCAT(CHINOOK.CUSTOMER.FIRSTNAME, CONCAT(' ', CHINOOK.CUSTOMER.LASTNAME));
3.6B
SELECT CONCAT(CHINOOK.EMPLOYEE.FIRSTNAME, CONCAT(' ', CHINOOK.EMPLOYEE.LASTNAME)) AS FULL_NAME,  SUM(CHINOOK.INVOICE.TOTAL)
FROM CHINOOK.CUSTOMER
JOIN CHINOOK.INVOICE
ON CHINOOK.INVOICE.CUSTOMERID= CHINOOK.CUSTOMER.CUSTOMERID
JOIN CHINOOK.EMPLOYEE
ON CHINOOK.EMPLOYEE.EMPLOYEEID = CHINOOK.CUSTOMER.SUPPORTREPID
GROUP BY CONCAT(CHINOOK.EMPLOYEE.FIRSTNAME, CONCAT(' ', CHINOOK.EMPLOYEE.LASTNAME))
ORDER BY SUM(CHINOOK.INVOICE.TOTAL) DESC
FETCH NEXT 1 ROW ONLY;
3.6C
SELECT CHINOOK.GENRE.NAME, COUNT(CHINOOK.INVOICELINE.QUANTITY) AS GRANDTOTAL
FROM CHINOOK.TRACK
JOIN CHINOOK.GENRE
ON CHINOOK.TRACK.GENREID=CHINOOK.GENRE.GENREID
JOIN CHINOOK.INVOICELINE
ON CHINOOK.TRACK.TRACKID=CHINOOK.INVOICELINE.TRACKID
GROUP BY CHINOOK.GENRE.NAME
ORDER BY COUNT(CHINOOK.INVOICELINE.QUANTITY) DESC;
4.1A
CREATE OR REPLACE FUNCTION CURRENT_TIME
RETURN TIMESTAMP
IS
BEGIN 
    RETURN LOCALTIMESTAMP;
END;
/

SELECT CURRENT_TIME FROM DUAL;
4.1B
CREATE OR REPLACE FUNCTION RETURN_LENGTH
RETURN NUMBER
IS
NAME_LENGTH NUMBER;
BEGIN 
SELECT LENGTH(NAME) INTO NAME_LENGTH
FROM CHINOOK.MEDIATYPE;

RETURN NAME_lENGTH;
END;
/
4.2A
CREATE OR REPLACE FUNCTION AVERAGE_TOTAL 
RETURN NUMBER
IS
AVERAGE NUMBER;
BEGIN 
SELECT AVG(TOTAL) INTO AVERAGE
FROM CHINOOK.INVOICE;

RETURN AVERAGE;
END;
/
SELECT AVERAGE_TOTAL FROM DUAL;
4.2B
CREATE OR REPLACE FUNCTION MOST_EXPENSIVE_TRACK 
RETURN VARCHAR2
IS
MAX_TRACK VARCHAR2;
BEGIN 
SELECT NAME INTO MAX_TRACK
FROM CHINOOK.TRACK
WHERE UNITPRICE=(
SELECT MAX(UNITPRICE)
FROM CHINOOK.TRACK
FETCH NEXT 1 ROW ONLY);
RETURN MAX_TRACK;
END;
/

SELECT MOST_EXPENSIVE FROM DUAL;
4.3A
CREATE OR REPLACE FUNCTION AVERAGE_INVOICE_PRICE 
RETURN NUMBER
IS
SUM NUMBER;
COUNT NUMBER;
AVERAGE NUMBER;
BEGIN 
SELECT SUM(UNITPRICE) INTO SUM
FROM CHINOOK.INVOICELINE;
SELECT COUNT(UNITPRICE) INTO COUNT
FROM CHINOOK.INVOICELINE;
AVERAGE:=SUM/COUNT;
RETURN AVERAGE;
END;
/

SELECT AVERAGE_INVOICE_PRICE FROM DUAL;
4.4A
CREATE OR REPLACE FUNCTION BORN_LATERTHAN_1968
RETURN SYS_REFCURSOR
IS
S SYS_REFCURSOR;
BEGIN 
    OPEN S FOR
        SELECT FIRSTNAME, LASTNAME, BIRTHDATE 
        FROM CHINOOK.EMPLOYEE 
        WHERE BIRTHDATE >  DATE'1968-01-01';
        RETURN S;
END;
/

SELECT BORN_LATERTHAN_1968 FROM DUAL;
5.1A
CREATE OR REPLACE PROCEDURE GET_ALL_EMPLOYEES
RETURN SYS_REFCURSOR
IS
EMPLOYEES SYS_REFCURSOR;
BEGIN
OPEN EMPLOYEES FOR
    SELECT FIRSTNAME || LASTNAME INTO EMPLOYEES
    FROM CHINOOK.EMPLOYEE;
    RETURN EMPLOYEES;
END;
/

SELECT GET_ALL_EMPLOYEES FROM DUAL;
5.2A
CREATE OR REPLACE PROCEDURE UPDATE_EMPLOYEE(ID IN CHINOOK.EMPLOYEE.EMPLOYEEID%TYPE,
FN IN CHINOOK.EMPLOYEE.FIRSTNAME%TYPE, LN IN CHINOOK.EMPLOYEE.LASTNAME%TYPE,
TILE IN CHINOOK.EMPLOYEE.TITLE%TYPE, RT IN CHINOOK.EMPLOYEE.RETPORTSTO%TYPE,
BD IN CHINOOK.EMPLOYEE.BIRTHDATE%TYPE, HD IN CHINOOK.EMPLOYEE.HIREDATE%TYPE,
AD IN CHINOOK.EMPLOYEE.ADDRESS%TYPE, CITY IN CHINOOK.EMPLOYEE.CITY%TYPE,
ST IN CHINOOK.EMPLOYEE.STATE%TYPE, CT IN CHINOOK.EMPLOYEE.COUNTRY%TYPE,
PC IN CHINOOK.EMPLOYEE.POSTALCODE%TYPE, PHONE IN CHINOOK.EMPLOYEE.PHONE%TYPE,
FAX IN CHINOOK.EMPLOYEE.FAX%TYPE, EMAIL IN CHINOOK.EMPLOYEE.EMAIL%TYPE)



IS

BEGIN
UPDATE EMPLOYEE
LASTNAME=FN
FIRSTNAME=FN
TITLE=TITLE
REPORTSTO=RT
BIRTHDAT=BD
HIREDATE=HD
ADDRESS=AD
CITY=CITY
STATE=ST
COUNTRY=CT
POSTALCODE=PC

PHONE=PHONE
FAX=FAX
EMAIL=EMAIL
WHERE EMPLOYEEID=ID
END;
/

SELECT UPDATE_EMPLOYEES FROM DUAL;
5.2B
CREATE OR REPLACE PROCEDURE GET_MANAGER(ID IN CHINOOK.EMPLOYEE.EMPLOYEEID%TYPE)
IS
MANAGERID REPORTSTO%TYPE;
MANAGER VARCHAR2;
BEGIN
SELECT REPORTSTO INTO MANAGER
FROM CHINOOK.EMPLOYEE
WHERE EMPLOYEEID=ID;
SELECT FIRSTNAME || LASTNAME INTO MANAGER
FROM CHINOOK.EMPLOYEE
WHERE EMPLOYEEID=MANAGERID
RETURN MANAGER;
END;
/

SELECT GET_MANAGER FROM DUAL;
5.3
CREATE OR REPLACE PROCEDURE NAME_AND_COMPANY(ID IN CHINOOK.EMPLOYEE.CUSTOMERID%TYPE)
IS
COMP VARCHAR2;
CUST_NAME VARCHAR2;
BEGIN
SELECT FIRSTNAME || LASTNAME INTO MANAGER, COMPANY INTO COMP
FROM CHINOOK.CUSTOMER
WHERE CUSTOMERID=ID;
RETURN COMP;
RETURN CUST_NAME;
END;
/

SELECT NAME_AND_COMPANY FROM DUAL;
6.A
--TRANSACTIONS
COMMIT;
CREATE OR REPLACE PROCEDURE DELETE_INSERTION(ID IN CHINOOK.EMPLOYEE.INVOICEID%TYPE)
IS
BEGIN
DELETE FROM INVOICELINE
WHERE INVOICELINEID=ID
COMMIT;
END;
/
6.B
COMMIT:
CREAT SEQUENCE MY_SEQUENCE
START WITH 0
INCRMENT BY 1;
CREATE OR REPLACE PROCEDURE ADD_CUSTOMER(FN IN CHINOOK.CUSTOMER.FIRSTNAME%TYPE, LN IN CHINOOK.CUSTOMER.LASTNAME%TYPE, 
    COMP IN CHINOOK.CUSTOMER.COMPANY%TYPE, AD IN CHINOOK.CUSTOMER.ADDRESS%TYPE, CITY IN CHINOOK.CUSTOMER.CITY%TYPE,
    STATE IN CHINOOK.CUSTOMER.STATE%TYPE, CT IN CHINOOK.CUSTOMER.COUNTRY%TYPE, PC IN CHINOOK.CUSTOMER.POSTALCODE%TYPE,
    PHONE IN CHINOOK.CUSTOMER.PHONE%TYPE, FAX IN CHINOOK.CUSTOMER.FAX%TYPE, EMAIL IN CHINOOK.CUSTOMER.EMAIL%TYPE,
    ID IN CHINOOK.CUSTOMER.SUPPORTREPID%TYPE)
    IS
    BEGIN
    INSERT INTO CHINOOK.CUSTOMER(FN, LN, COMP, AD, CITY, STATE, CT, PC, PHONE, FAX, EMAIL, ID)
    END;
    /
    7.1A
    CREATE TRIGGER NEW_EMPLOYEE
    AFTER INSERT ON CHINOOK.EMPLOYEE
    FOR EACH ROW
    BEGIN
    DBMS_OUTPUT.PUT_LINE('A NEW EMPLOYEE HAS BEEN ADDED TO THE TABLE')
    END;
    /
    
    
    7.1B
    CREATE TRIGGER NEW_ALBUM
    AFTER UPDATE ON CHINOOK.ALBUM
    FOR EACH ROW
    BEGIN
    DBMS_OUTPUT.PUT_LINE('A NEW ALBUM HAS BEEN INSERTED INTO THE TABLE')
    END;
    /
    
    
    7.1C
    CREATE TRIGGER NEW_ALBUM
    AFTER DELETE ON CHINOOK.CUSTOMER
    FOR EACH ROW
    BEGIN
    DBMS_OUTPUT.PUT_LINE('A CUSTOMER HAS BEEN REMOVED FROM THE TABLE')
    END;
    /
    
    