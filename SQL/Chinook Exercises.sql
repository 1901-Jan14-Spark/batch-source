--SELECT ALL RECORDS FROM EMPLOYEE TABLE
SELECT *
FROM EMPLOYEE;

--SELECT ALL RECORDS FROM EMPLOYEE CONTAINING LASTNAME = King
SELECT *
FROM EMPLOYEE
WHERE LASTNAME = 'King';

--SELECT ALL RECORS FROM EMPLOYEE WHERE FIRST NAME IS Andrew AND REPORTSTO IS NULL
SELECT *
FROM EMPLOYEE
WHERE FIRSTNAME = 'Andrew' AND REPORTSTO IS NULL;

--SELECT ALL ALBUMS IN ALBUM AND SORT IN DECENDING BY TITLE
SELECT * 
FROM ALBUM
ORDER BY TITLE DESC;

--SELECT ALL ALBUMS IN ALBUM AND SORT IN ASCENDING BY TITLE
SELECT FIRSTNAME
FROM CUSTOMER
ORDER BY CITY ASC;

--SELECT INVOICES WITH A BILLIND ADDRESS LIKE "T%"
SELECT *
FROM INVOICE
WHERE BILLINGADDRESS LIKE 'T%';

--INSERT TWO NEW RECORDS INTO GENRE TABLE
INSERT INTO GENRE VALUES(26, 'Horror');
INSERT INTO GENRE VALUES(27, 'Romance');

--INSERT TWO NEW ENTRIES INTO THE EMPLOYEE TABLE
INSERT INTO EMPLOYEE VALUES (9,'Rogers', 'Dave', 'Moral Suport Associate', 1, DATE '1990-04-23', DATE '2019-01-23', '643 Love All Street', 'Anthony', 'NM', 'UNITED STATES OF AMERICA', 88021, '+1 (915) 456 9087','+1 (915) 456 9087', 'd.rodgers@gmail.com');
INSERT INTO EMPLOYEE VALUES (10,'Davis', 'Kylee', 'Data Entry Specialist', 1, DATE '1992-12-01', DATE '2018-03-23', '1212 Data Best Road', 'Kansas City', 'MO', 'UNITED STATES OF AMERICA', 64030, '+1 (890) 653 8759','+1 (890) 653 8759', 'K.Dis@gmail.com');

--INSERT TWO NEW RECORDS TO THE CUSTOMER TABLE
INSERT INTO CUSTOMER VALUES(60, 'Prisca', 'Trenoweth', 'TallgrassEnergy Partners, LP', '1790 Dennis Park', 'Liuhou', null, 'China', null, '902-515-5924','902-515-5924', 'ptrenoweth0@techcrunch.com', 2);
INSERT INTO CUSTOMER VALUES(61, 'Yuryev', 'Holt', 'CACI International, Inc.', '7348 Claremont Point', 'Järfälla', 'Stockholm', 'Sweden', 17671	, '970-927-6274','970-927-6274', 'hyuryev0@google.fr', 5);

--UPDATE Aaron Mitchell IN CUSTOMER TABLE TO Robert Walter
UPDATE CUSTOMER
SET FIRSTNAME = 'Robert', LASTNAME = 'Walter'
WHERE FIRSTNAME = 'Aaron' AND LASTNAME = 'Mitchell';

--UPDATE ARTIST NAME IN ARTIST TABLE FROM "Creedence Clearwater Revival" TO "CCR"
UPDATE ARTIST
SET NAME = 'CCR'
WHERE NAME ='Creedence Clearwater Revival';

-- CREATE AN INNER JOIN FOR CUSTOMERS AND ORDERS AND SPECIFIES THE CUSTOMER AND INVOICEID
SELECT I.INVOICEID AS INVOICE , C. FIRSTNAME AS FIRSTNAME, C.LASTNAME AS LASTNAME
FROM INVOICE I
INNER JOIN CUSTOMER C
ON I.CUSTOMERID = C.CUSTOMERID
ORDER BY I.INVOICEID ASC;

--CREATE AN OUTER  JOIN THAT JOINS THE CUSTOMER AND INVOICE TABLE, SPECIFYING THE CUSTOMERID AND INVOICEID
SELECT I.INVOICEID AS INVOICE, CONCAT(C.FIRSTNAME, CONCAT(' ', C.LASTNAME)) AS CUSTOMER_NAME, C.CUSTOMERID AS ID, I.TOTAL 
FROM INVOICE I
FULL OUTER JOIN CUSTOMER C
ON I.CUSTOMERID = C.CUSTOMERID
ORDER BY I.INVOICEID ASC;

--CREATE A RIGHT JOIN THAT JOINS ALBUM AND ARTIST SPECIFYING ARTIST NAME AND TITLE
SELECT A.TITLE, B.NAME
FROM ALBUM A
RIGHT JOIN ARTIST B
ON A.ARTISTID = B.ARTISTID
ORDER BY A.ARTISTID ASC;

--CREATE A CROSS JOIN THAT JOINS ALBUM AND ARTIST AND SORTS BY ARTISTNAME IN ASCENDING ORDER
SELECT *
FROM ALBUM
CROSS JOIN ARTIST
ORDER BY ARTIST.NAME ASC;

--CREATE A SELF JOIN ON THE EMPLOYEE TABLE JOINING ON THE REPORTSTO COLUMN
SELECT CONCAT(B1.FIRSTNAME, CONCAT(' ', B1.LASTNAME)) AS EMPLOYEE,CONCAT(A1.FIRSTNAME, CONCAT(' ', A1.LASTNAME)) AS MANAGER
FROM EMPLOYEE B1, EMPLOYEE A1
WHERE B1.REPORTSTO = A1.EMPLOYEEID
ORDER BY B1.REPORTSTO ASC;

--CREATE A QUEARY THAT SHOWS THE CUSTOMER FULL_NAME WITH THE TOTAL AMOUNT THEY HAVE SPENT AS TOTAL
SELECT CONCAT(C.FIRSTNAME, CONCAT(' ', C.LASTNAME)) AS FULL_NAME,  SUM(I.TOTAL) AS TOTAL
FROM CUSTOMER C
JOIN INVOICE I
ON C.CUSTOMERID = I.CUSTOMERID 
GROUP BY C.CUSTOMERID, CONCAT(C.FIRSTNAME, CONCAT(' ', C.LASTNAME))
ORDER BY C.CUSTOMERID ASC;

--CREATE A QUEARY THAT SHOWS THE EMPLOYEE WHO HAS MADE THE HIGHEST TOTAL VALUE OF SALES
SELECT CONCAT(E.FIRSTNAME, CONCAT(' ', E.LASTNAME)) AS EMPLOYEE_NAME,  COUNT(I.CUSTOMERID) AS NUM_OF_SALES
FROM EMPLOYEE E
JOIN CUSTOMER C
ON C.SUPPORTREPID = E.EMPLOYEEID
JOIN INVOICE I
ON C.CUSTOMERID = I.CUSTOMERID 
GROUP BY CONCAT(E.FIRSTNAME, CONCAT(' ', E.LASTNAME))
ORDER BY COUNT(I.CUSTOMERID) DESC
FETCH NEXT 1 ROW ONLY;

--CREATE A QUERY WHICH SHOWS THE NUMBER OF PURCHASES PER EACH GENRE. DISPLAY THE NAME OF EACH GENRE AND THE NUMER OF PURCHASES
SELECT G.NAME, COUNT(G.GENREID) AS NUM_OF_SALES
FROM GENRE G
INNER JOIN TRACK T
ON G.GENREID = T.GENREID
JOIN INVOICELINE IL
ON T.TRACKID = IL.TRACKID
JOIN INVOICE I
ON IL.INVOICEID=I.INVOICEID 
GROUP BY G.NAME
ORDER BY COUNT( G.GENREID) DESC;

-- Create a function that returns the current time.	
create or replace FUNCTION MY_TIME
RETURN VARCHAR2
IS
BEGIN
 RETURN CURRENT_TIMESTAMP;
END;
/

SELECT MY_TIME
FROM DUAL;

--create a function that returns the length of name in MEDIATYPE table
CREATE OR REPLACE FUNCTION MY_LENGTH(X VARCHAR2)
RETURN NUMBER
IS
BEGIN
RETURN LENGTH(X);
END;
/

SELECT MY_LENGTH(NAME)
FROM MEDIATYPE;

--Create a function that returns the average total of all invoices 
create or replace FUNCTION MY_AVG
RETURN NUMBER
IS
TOTAL_AVG INVOICE.TOTAL%TYPE;
BEGIN
SELECT AVG(TOTAL) INTO TOTAL_AVG
FROM INVOICE;
RETURN TOTAL_AVG;
END;
/

SELECT MY_AVG
FROM DUAL;

commit;

--Create a function that returns the most expensive track
 CREATE OR REPLACE FUNCTION MAX_PRICE_TRACK
 RETURN VARCHAR2
 IS 
 MAX_TRACK NUMBER;
 BEGIN
 SELECT MAX(UNITPRICE) INTO MAX_TRACK
 FROM TRACK ;
 RETURN MAX_TRACK;
 END;
 /

SELECT MAX_PRICE_TRACK
FROM DUAL;

-- Create a function that returns the average price of invoiceline items in the invoiceline table
CREATE OR REPLACE FUNCTION INVOICELINE_AVG
RETURN NUMBER
IS
INAVG NUMBER(3,2);
BEGIN
SELECT AVG(UNITPRICE) INTO INAVG
FROM INVOICELINE;
RETURN INAVG;
END;
/

SELECT INVOICELINE_AVG
FROM DUAL;

--Create a function that returns all employees who are born after 1968.
CREATE OR REPLACE FUNCTION AFTER1968
RETURN  SYS_REFCURSOR
IS BDAY SYS_REFCURSOR;
BEGIN
OPEN BDAY
FOR
SELECT FIRSTNAME,LASTNAME, BIRTHDATE
FROM EMPLOYEE
WHERE BIRTHDATE > DATE '1968-01-01' ;
RETURN BDAY;
END;
/

DECLARE
 NAME_GET  SYS_REFCURSOR:= AFTER1968();
 NAME_FN EMPLOYEE.FIRSTNAME%TYPE;
 NAME_LN  EMPLOYEE.LASTNAME%TYPE;
 BIRTH_DAY EMPLOYEE.BIRTHDATE%TYPE;

BEGIN
 LOOP
       FETCH NAME_GET INTO
        NAME_FN, NAME_LN, BIRTH_DAY;
       EXIT WHEN NAME_GET%NOTFOUND;
       DBMS_OUTPUT.PUT_LINE((NAME_FN || ' ' ||NAME_LN) || ' ' || BIRTH_DAY);
   END LOOP;
   CLOSE NAME_GET;
END;


--Create a stored procedure that selects the first and last names of all the employees.--
CREATE OR REPLACE PROCEDURE ALL_NAMES(NAMES OUT SYS_REFCURSOR)
IS
BEGIN
OPEN NAMES FOR
SELECT FIRSTNAME, LASTNAME
FROM EMPLOYEE
ORDER BY FIRSTNAME;
END;
/

DECLARE 
    MY_EMP_NAMES SYS_REFCURSOR;
    EMP_FN EMPLOYEE.FIRSTNAME%TYPE;
    EMP_LN EMPLOYEE.LASTNAME%TYPE;
BEGIN
    ALL_NAMES(MY_EMP_NAMES);
    LOOP
        FETCH MY_EMP_NAMES INTO EMP_FN, EMP_LN;
        EXIT WHEN MY_EMP_NAMES%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE(EMP_FN|| ' ' ||EMP_LN);
        END LOOP;
        CLOSE MY_EMP_NAMES;
END;
/

COMMIT;

--Create a stored procedure that updates the personal information of an employee.
--CREATE OR REPLACE  PROCEDURE EMP_INFO_UPDATE( NEW_LAST VARCHAR2, NEW_ADDRESS VARCHAR2, 
--NEW_CITY VARCHAR2, NEW_STATE VARCHAR2, NEW_COUNTRY VARCHAR2, 
--NEW_ZIP EMPLOYEE.POSTALCODE%TYPE)
--IS
--    CURRENT_LASTNAME EMPLOYEE.LASTNAME%TYPE;
--    CURRENT_ADDRESS EMPLOYEE.ADDRESS%TYPE;
--    CURRENT_CITY EMPLOYEE.CITY%TYPE;
--    CURRENT_STATE EMPLOYEE.STATE%TYPE;
--    CURRENT_COUNTRY EMPLOYEE.COUNTY%TYPE;
--    CURRENT_ZIP EMPLOYEE.POSTALCODE%TYPE;
--BEGIN
--SELECT LASTNAME. ADDRESS, CITY, STATE, COUNTRY, POSTALCODE INTO CURRENT_LASTNAME, CURRENT_ADDRESS, CURRENT_CITY, CURRENT_STATE, CURRENT_COUNTRY, CURRENT_ZIP
--FROM EMPLOYEE
--WHERE CURRENT_LASTNAME= NEW_LAST; CURRENT_ADDRESS=NEW_ADDRESS; CURRENT_CITY=NEW_CITY, CURRENT_STATE=NEW_STATE, CURRENT_COUNTRY=NEW_COUNTRY, CURRENT_ZIP=NEW_ZIP

CREATE OR REPLACE  PROCEDURE EMP_INFO_UPDATE(EMP_ID NUMBER, NEW_LAST VARCHAR2)
IS
    CURRENT_LASTNAME EMPLOYEE.LASTNAME%TYPE;
    
BEGIN
UPDATE EMPLOYEE
SET LASTNAME = NEW_LAST
WHERE EMPLOYEEID = EMP_ID;

DBMS_OUTPUT.PUT_LINE('LASTNAME UPDATE');
END;
/

SET SERVEROUTPUT ON;
EXEC EMP_INFO_UPDATE(10,'Davis');


