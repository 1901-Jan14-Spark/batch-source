--SELECT ALL RECORDS FROM EMPLOYEE TABLE
SELECT *
FROM EMPLOYEE;

--SELECT ALL RECORDS FROM EMPLOYEE CONTAINING LASTNAME = King
SELECT *
FROM EMPLOYEE
WHERE LASTNAME = 'King';

--SELECT ALL RECORS FROM EMPLOYEE WHERE FIRST NAME IS Andrew AND REPORTSTO IS NULL
SELECT *
FROM EMPLOYEE
WHERE FIRSTNAME = 'Andrew' AND REPORTSTO IS NULL;

--SELECT ALL ALBUMS IN ALBUM AND SORT IN DECENDING BY TITLE
SELECT * 
FROM ALBUM
ORDER BY TITLE DESC;

--SELECT ALL ALBUMS IN ALBUM AND SORT IN ASCENDING BY TITLE
SELECT FIRSTNAME
FROM CUSTOMER
ORDER BY CITY ASC;

--SELECT INVOICES WITH A BILLIND ADDRESS LIKE "T%"
SELECT *
FROM INVOICE
WHERE BILLINGADDRESS LIKE 'T%';

--INSERT TWO NEW RECORDS INTO GENRE TABLE
INSERT INTO GENRE VALUES(26, 'Horror');
INSERT INTO GENRE VALUES(27, 'Romance');

--INSERT TWO NEW ENTRIES INTO THE EMPLOYEE TABLE
INSERT INTO EMPLOYEE VALUES (9,'Rogers', 'Dave', 'Moral Suport Associate', 1, DATE '1990-04-23', DATE '2019-01-23', '643 Love All Street', 'Anthony', 'NM', 'UNITED STATES OF AMERICA', 88021, '+1 (915) 456 9087','+1 (915) 456 9087', 'd.rodgers@gmail.com');
INSERT INTO EMPLOYEE VALUES (10,'Davis', 'Kylee', 'Data Entry Specialist', 1, DATE '1992-12-01', DATE '2018-03-23', '1212 Data Best Road', 'Kansas City', 'MO', 'UNITED STATES OF AMERICA', 64030, '+1 (890) 653 8759','+1 (890) 653 8759', 'K.Dis@gmail.com');

--INSERT TWO NEW RECORDS TO THE CUSTOMER TABLE
INSERT INTO CUSTOMER VALUES(60, 'Prisca', 'Trenoweth', 'TallgrassEnergy Partners, LP', '1790 Dennis Park', 'Liuhou', null, 'China', null, '902-515-5924','902-515-5924', 'ptrenoweth0@techcrunch.com', 2);
INSERT INTO CUSTOMER VALUES(61, 'Yuryev', 'Holt', 'CACI International, Inc.', '7348 Claremont Point', 'Järfälla', 'Stockholm', 'Sweden', 17671	, '970-927-6274','970-927-6274', 'hyuryev0@google.fr', 5);

--UPDATE Aaron Mitchell IN CUSTOMER TABLE TO Robert Walter
UPDATE CUSTOMER
SET FIRSTNAME = 'Robert', LASTNAME = 'Walter'
WHERE FIRSTNAME = 'Aaron' AND LASTNAME = 'Mitchell';

--UPDATE ARTIST NAME IN ARTIST TABLE FROM "Creedence Clearwater Revival" TO "CCR"
UPDATE ARTIST
SET NAME = 'CCR'
WHERE NAME ='Creedence Clearwater Revival';

-- CREATE AN INNER JOIN FOR CUSTOMERS AND ORDERS AND SPECIFIES THE CUSTOMER AND INVOICEID
SELECT I.INVOICEID AS INVOICE , C. FIRSTNAME AS FIRSTNAME, C.LASTNAME AS LASTNAME
FROM INVOICE I
INNER JOIN CUSTOMER C
ON I.CUSTOMERID = C.CUSTOMERID
ORDER BY I.INVOICEID ASC;

--CREATE AN OUTER  JOIN THAT JOINS THE CUSTOMER AND INVOICE TABLE, SPECIFYING THE CUSTOMERID AND INVOICEID
SELECT I.INVOICEID AS INVOICE, CONCAT(C.FIRSTNAME, CONCAT(' ', C.LASTNAME)) AS CUSTOMER_NAME, C.CUSTOMERID AS ID, I.TOTAL 
FROM INVOICE I
FULL OUTER JOIN CUSTOMER C
ON I.CUSTOMERID = C.CUSTOMERID
ORDER BY I.INVOICEID ASC;

--CREATE A RIGHT JOIN THAT JOINS ALBUM AND ARTIST SPECIFYING ARTIST NAME AND TITLE
SELECT A.TITLE, B.NAME
FROM ALBUM A
RIGHT JOIN ARTIST B
ON A.ARTISTID = B.ARTISTID
ORDER BY A.ARTISTID ASC;

--CREATE A CROSS JOIN THAT JOINS ALBUM AND ARTIST AND SORTS BY ARTISTNAME IN ASCENDING ORDER
SELECT *
FROM ALBUM
CROSS JOIN ARTIST
ORDER BY ARTIST.NAME ASC;

--CREATE A SELF JOIN ON THE EMPLOYEE TABLE JOINING ON THE REPORTSTO COLUMN
SELECT CONCAT(B1.FIRSTNAME, CONCAT(' ', B1.LASTNAME)) AS EMPLOYEE,CONCAT(A1.FIRSTNAME, CONCAT(' ', A1.LASTNAME)) AS MANAGER
FROM EMPLOYEE B1, EMPLOYEE A1
WHERE B1.REPORTSTO = A1.EMPLOYEEID
ORDER BY B1.REPORTSTO ASC;

--CREATE A QUEARY THAT SHOWS THE CUSTOMER FULL_NAME WITH THE TOTAL AMOUNT THEY HAVE SPENT AS TOTAL
SELECT CONCAT(C.FIRSTNAME, CONCAT(' ', C.LASTNAME)) AS FULL_NAME,  SUM(I.TOTAL) AS TOTAL
FROM CUSTOMER C
JOIN INVOICE I
ON C.CUSTOMERID = I.CUSTOMERID 
GROUP BY C.CUSTOMERID, CONCAT(C.FIRSTNAME, CONCAT(' ', C.LASTNAME))
ORDER BY C.CUSTOMERID ASC;

--CREATE A QUEARY THAT SHOWS THE EMPLOYEE WHO HAS MADE THE HIGHEST TOTAL VALUE OF SALES
SELECT CONCAT(E.FIRSTNAME, CONCAT(' ', E.LASTNAME)) AS EMPLOYEE_NAME, SUM(E.EMPLOYEEID/E.EMPLOYEEID) AS NUM_OF_SALES
FROM EMPLOYEE E
JOIN CUSTOMER C
ON C.SUPPORTREPID = E.EMPLOYEEID
GROUP BY CONCAT(E.FIRSTNAME, CONCAT(' ', E.LASTNAME))
ORDER BY SUM(E.EMPLOYEEID/E.EMPLOYEEID) DESC
FETCH NEXT 1 ROW ONLY;
--CREATE A QUERY WHICH SHOWS THE UMBER OF PURCHASES PER EACH GENRE. DISPLAY THE NAME OF EACH GENRE AND THE NUMER OF PURCHASES
SELECT G.NAME, SUM(G.GENREID/G.GENREID) AS NUM_OF_SALES
FROM GENRE G
INNER JOIN TRACK T
ON G.GENREID = T.GENREID
JOIN INVOICELINE IL
ON T.TRACKID = IL.TRACKID
JOIN INVOICE I
ON IL.INVOICEID=I.INVOICEID 
GROUP BY G.NAME
ORDER BY SUM(G.GENREID/G.GENREID) DESC;











