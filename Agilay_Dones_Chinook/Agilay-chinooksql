SET SERVEROUTPUT ON;
----2.1
--A
SELECT *
FROM CHINOOK.EMPLOYEE;
--B
SELECT *
FROM CHINOOK.EMPLOYEE 
WHERE LASTNAME = 'King';
--C
SELECT *
FROM CHINOOK.EMPLOYEE 
WHERE FIRSTNAME = 'Andrew' AND REPORTSTO IS null;
--D
SELECT *
FROM CHINOOK.ALBUM
ORDER BY TITLE DESC;


SELECT *
FROM CHINOOK.CUSTOMER;
--E
SELECT FIRSTNAME
FROM CHINOOK.CUSTOMER 
ORDER BY CITY ASC;
--F
SELECT *
FROM CHINOOK.INVOICE
WHERE BILLINGADDRESS LIKE 'T%';
----2.2
--A
INSERT INTO CHINOOK.GENRE VALUES(26,'Sca');
INSERT INTO CHINOOK.GENRE VALUES(27,'Sreamo');
INSERT INTO CHINOOK.GENRE VALUES(28, 'Oldies');

SELECT * 
FROM CHINOOK.EMPLOYEE;
--B
INSERT INTO CHINOOK.EMPLOYEE (EMPLOYEEID, FIRSTNAME, LASTNAME, TITLE, HIREDATE,CITY,COUNTRY) VALUES (9, 'CATE','LOWRY','General Manager',DATE '2019-02-27','Edmonton','Canada');
INSERT INTO CHINOOK.EMPLOYEE (EMPLOYEEID, FIRSTNAME, LASTNAME)VALUES (10,'Agilay','Dones');
--C
INSERT INTO CHINOOK.CUSTOMER (CUSTOMERID, FIRSTNAME, LASTNAME, COMPANY,EMAIL) VALUES (60, 'JIMMY', 'JONES', 'BIIIKKEES!!', 'Jimmy@gmail.com');
INSERT INTO CHINOOK.CUSTOMER (CUSTOMERID, FIRSTNAME, LASTNAME, COMPANY,EMAIL) VALUES (61, 'Frankie', 'Mikes', 'Sing Songs', 'Nancy4life@hotmail.com');

SELECT * 
FROM CHINOOK.CUSTOMER;
----2.3
--A
UPDATE CHINOOK.CUSTOMER
SET FIRSTNAME = 'Robert', LASTNAME = 'Walter'
WHERE CUSTOMERID = 32;
commit;
--B
SELECT NAME, ARTISTID
FROM CHINOOK.ARTIST
WHERE NAME = 'Creedence Clearwater Revival';

UPDATE CHINOOK.ARTIST
SET NAME = 'CRR'
WHERE ARTISTID = 76;

CREATE VIEW SHOW AS 
SELECT * 
FROM CHINOOK.CUSTOMER;

SELECT *
FROM SHOW;

----3.0
---3.1
--A 
SELECT CUSTOMER.FIRSTNAME, INVOICE.INVOICEID, INVOICE.INVOICEDATE, CUSTOMER.CUSTOMERID
FROM CHINOOK.CUSTOMER
JOIN CHINOOK.INVOICE 
ON CUSTOMER.CUSTOMERID = INVOICE.CUSTOMERID
--ORDER BY CUSTOMER.CUSTOMERID;
ORDER BY INVOICE.INVOICEID;

---3.2
--A
SELECT C.CUSTOMERID, C.FIRSTNAME, C.LASTNAME, I.INVOICEID, I.TOTAL
FROM CHINOOK.CUSTOMER C
FULL JOIN CHINOOK.INVOICE I 
ON C.CUSTOMERID = I.CUSTOMERID
ORDER BY C.CUSTOMERID;

SELECT C.CUSTOMERID, C.FIRSTNAME, C.LASTNAME, I.INVOICEID, I.TOTAL
FROM CHINOOK.CUSTOMER C
FULL JOIN CHINOOK.INVOICE I 
ON C.CUSTOMERID = I.CUSTOMERID
ORDER BY I.INVOICEID;


--RIGHT 
SELECT*-- A.NAME, AL.TITLE
FROM CHINOOK.ALBUM AL 
LEFT JOIN CHINOOK.ARTIST A
ON AL.ARTISTID = A.ARTISTID;

SELECT A.NAME, AL.TITLE
FROM CHINOOK.ALBUM AL 
RIGHT JOIN CHINOOK.ARTIST A
ON AL.ARTISTID = A.ARTISTID;

--------

SELECT*
FROM CHINOOK.ALBUM AL
CROSS JOIN CHINOOK.ARTIST A
WHERE A.ARTISTID = AL.ARTISTID
ORDER BY A.NAME ASC;

--ON AL.ARTISTID = A.ARTISTID;

--- SELF Q
SELECT*-- E.REPORTSTO 
FROM CHINOOK.EMPLOYEE E
WHERE E.REPORTSTO = E.REPORTSTO;

---JOINED A
SELECT (C.FIRSTNAME||C.LASTNAME)AS NAMES, SUM(I.TOTAL) AS TOTAL
FROM CHINOOK.INVOICE I 
JOIN CHINOOK.CUSTOMER C
ON I.CUSTOMERID = C.CUSTOMERID
GROUP BY (C.FIRSTNAME||C.LASTNAME);

--JOINED B
SELECT E.EMPLOYEEID,  SUM(I.TOTAL) AS SUM
FROM CHINOOK.EMPLOYEE E 
JOIN CHINOOK.CUSTOMER C
ON C.SUPPORTREPID = E.EMPLOYEEID
JOIN CHINOOK.INVOICE I 
ON I.CUSTOMERID = C.CUSTOMERID
GROUP BY E.EMPLOYEEID
ORDER BY SUM ASC;

SELECT G.NAME, SUM(I.TOTAL) AS SALES
FROM CHINOOK.GENRE G
JOIN CHINOOK.TRACK T
ON G.GENREID = T.GENREID
JOIN CHINOOK.INVOICELINE L
ON L.TRACKID =  T.TRACKID
JOIN CHINOOK.INVOICE I 
ON I.INVOICEID = L.INVOICEID
GROUP BY G.NAME
ORDER BY SALES DESC;

----FUNCTIONS 


CREATE OR REPLACE FUNCTION CTIME 
RETURN VARCHAR
IS
BEGIN
RETURN CURRENT_TIMESTAMP;
END;
/

BEGIN 
DBMS_OUTPUT.PUT_LINE(CTIME());
END;
/


CREATE OR REPLACE FUNCTION LENNY(VARY VARCHAR2)
RETURN NUMBER
IS 
BEGIN 
RETURN LENGTH(VARY);
END;
/
SELECT LENNY(NAME)
FROM CHINOOK.MEDIATYPE;



---4.2
--A
CREATE OR REPLACE FUNCTION AVE
RETURN NUMBER AS TOTS NUMBER;
BEGIN 
SELECT AVG(TOTAL) INTO TOTS FROM CHINOOK.INVOICE;
RETURN TOTS;
END;
/

BEGIN 
DBMS_OUTPUT.PUT_LINE(AVE());
END;
/

--B
CREATE OR REPLACE FUNCTION MAX_TRACK
RETURN NUMBER AS MAXY NUMBER;
BEGIN
SELECT MAX(UNITPRICE) INTO MAXY FROM CHINOOK.TRACK;
RETURN MAXY;
END;
/

BEGIN 
DBMS_OUTPUT.PUT_LINE(MAX_TRACK());
END;
/


SELECT T.TRACKID, T.UNITPRICE
FROM CHINOOK.TRACK T
ORDER BY UNITPRICE DESC;




--4.3
SELECT IL.UNITPRICE, IL.INVOICELINEID
FROM CHINOOK.INVOICELINE IL
ORDER BY UNITPRICE DESC;

CREATE OR REPLACE FUNCTION UNIT_AVG 
RETURN NUMBER AS THE_AVG NUMBER; 
BEGIN 
SELECT AVG(UNITPRICE) INTO THE_AVG FROM CHINOOK.INVOICELINE;
RETURN THE_AVG;
END;
/

BEGIN
DBMS_OUTPUT.PUT_LINE(UNIT_AVG());
END;
/
--4.4
CREATE OR REPLACE FUNCTION OLDIES
RETURN SYS_REFCURSOR
IS S SYS_REFCURSOR;
BEGIN 
OPEN S FOR
SELECT FIRSTNAME, BIRTHDATE FROM CHINOOK.EMPLOYEE E WHERE E.BIRTHDATE > '01-JAN-68';
RETURN S;
END;
/

DECLARE 
VARIE SYS_REFCURSOR := OLDIES;
TEMP_NAME CHINOOK.EMPLOYEE.FIRSTNAME%TYPE;
TEMP_DATE CHINOOK.EMPLOYEE.BIRTHDATE%TYPE;
BEGIN 
LOOP 
FETCH VARIE INTO TEMP_NAME, TEMP_DATE;
DBMS_OUTPUT.PUT_LINE(TEMP_NAME||TEMP_DATE);
EXIT WHEN VARIE% NOTFOUND;
END LOOP;
CLOSE VARIE;
END;
/


CREATE OR REPLACE FUNCTION OLDIES(S OUT SYS_REFCURSOR)
RETURN DATE AS OLDS DATE;
BEGIN 
OPEN S FOR
SELECT BIRTHDATE INTO OLDS FROM CHINOOK.EMPLOYEE
WHERE BIRTHDATE > '01-JAN-68';
RETURN OLDS;
END;
/

BEGIN 
DBMS_OUTPUT.PUT_LINE(OLDIES());
END;
/

BEGIN 
LOOP
DBMS_OUTPUT.PUT_LINE(OLDIES());
END LOOP;
END;
/

--5.2
CREATE OR REPLACE PROCEDURE FIRST_LAST(S OUT SYS_REFCURSOR, NAM1 IN VARCHAR2, NAM2 IN VARCHAR2)
IS
BEGIN 
OPEN S FOR 
    SELECT FIRSTNAME, LASTNAME
    FROM CHINOOK.EMPLOYEE; 
    END;
    /

DECLARE 
VARS SYS_REFCURSOR;
TEMP_FIRST CHINOOK.EMPLOYEE.FIRSTNAME%TYPE;
TEMP_LAST CHINOOK.EMPLOYEE.LASTNAME%TYPE;
BEGIN 
    FIRST_LAST(VARS,'FIRSTNAME','LASTNAME');
    LOOP
    FETCH VARS INTO TEMP_FIRST, TEMP_LAST;
    EXIT WHEN VARS%NOTFOUND;
    DBMS_OUTPUT.PUT_LINE(TEMP_FIRST||TEMP_LAST);
    END LOOP;
    CLOSE VARS;
    END;
    /
    
CREATE OR REPLACE PROCEDURE UP_EMPLOYEE(EMP_ID IN CHINOOK.EMPLOYEE.EMPLOYEEID%TYPE, EMP_T IN CHINOOK.EMPLOYEE.TITLE%TYPE)--,MNGER IN CHINOOK.EMPLOYEE.REPORTSTO%TYPE)
IS 
BEGIN 
    UPDATE CHINOOK.EMPLOYEE E
    SET E.TITLE = EMP_T --, REPORTSTO = MNGER
    WHERE E.EMPLOYEEID = EMP_ID;
    END;
    /

BEGIN 
    UP_EMPLOYEE(10,'IT STAFF');
    END;
    /

CREATE OR REPLACE PROCEDURE RETURN_MANAGER(EMP_ID IN EMPLOYEE.EMPLOYEEID%TYPE, MG_ID OUT EMPLOYEE.REPORTSTO%TYPE)
IS
BEGIN 
SELECT REPORTSTO INTO MG_ID
FROM EMPLOYEE
WHERE EMPLOYEEID  = EMP_ID;
END;
/
DECLARE MG_ID EMPLOYEE.REPORTSTO%TYPE;
BEGIN 
RETURN_MANAGER(4,MG_ID);
DBMS_OUTPUT.PUT_LINE(MG_ID);
END;
/

--5.3
CREATE OR REPLACE PROCEDURE NAME_COMPANY_CUS(CUST_ID IN CUSTOMER.CUSTOMERID%TYPE, CUSNAME OUT CUSTOMER.FIRSTNAME%TYPE, CUS_COMP OUT CUSTOMER.COMPANY%TYPE)
IS
BEGIN 
SELECT FIRSTNAME, COMPANY INTO CUSNAME, CUS_COMP
FROM CUSTOMER 
WHERE CUSTOMERID = CUST_ID;
END;
/
DECLARE CUSNAME CUSTOMER.FIRSTNAME%TYPE;
        CUS_COMP CUSTOMER.COMPANY%TYPE;
BEGIN 
NAME_COMPANY_CUS(10, CUSNAME, CUS_COMP);
DBMS_OUTPUT.PUT_LINE(CUSNAME||CUS_COMP);
END;
/

--6.0
--A
ALTER TABLE INVOICE DROP CONSTRAINT FK_INVOICECUSTOMERID;
ALTER TABLE INVOICELINE DROP CONSTRAINT FK_INVOICELINEINVOICEID;
CREATE OR REPLACE PROCEDURE DELETE_INVOICE(INVOICE_ID IN INVOICE.INVOICEID%TYPE)
IS 
BEGIN
DELETE FROM INVOICE 
WHERE INVOICEID = INVOICE_ID;
END;
/
BEGIN 
DELETE_INVOICE(324);
END;
/

--B
ALTER TABLE CUSTOMER DROP CONSTRAINT SYS_C005119;
CREATE OR REPLACE PROCEDURE INSERT_CUSTOMER(CUST_ID IN CUSTOMER.CUSTOMERID%TYPE, FIRSTN IN CUSTOMER.FIRSTNAME%TYPE, MAIL IN CUSTOMER.EMAIL%TYPE)
IS
BEGIN
INSERT INTO CUSTOMER(CUSTOMERID, FIRSTNAME, EMAIL)
            VALUES(CUST_ID, FIRSTN, MAIL);
            END;
            /
            
BEGIN 
INSERT_CUSTOMER(63, 'JAMES','J@MAIL');
END;
/
--7.1
--A
CREATE OR REPLACE TRIGGER TRIGEMP
AFTER UPDATE ON EMPLOYEE
FOR EACH ROW
BEGIN
DBMS_OUTPUT.PUT_LINE('HELLO NEW EMPLOYEE');
END;
/

UPDATE EMPLOYEE 
SET TITLE = 'IT STAFF'
WHERE EMPLOYEEID = 1;

--B
CREATE OR REPLACE TRIGGER ABLUM_UPDATE
AFTER UPDATE ON ALBUM
BEGIN
DBMS_OUTPUT.PUT_LINE('ALBUM TABLE UPDATE');
END;
/
UPDATE ALBUM
SET TITLE = 'FTATRWS'
WHERE ALBUMID = 1;

--C 
CREATE OR REPLACE TRIGGER CUSTOMER_DELETED
AFTER DELETE ON CUSTOMER
BEGIN 
DBMS_OUTPUT.PUT_LINE('CUSTOMER DELETED');
END;
/

DELETE FROM CUSTOMER
WHERE CUSTOMERID = 62;

