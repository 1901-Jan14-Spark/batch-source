--2.1a select all records from employee table
SELECT *
FROM EMPLOYEE;

--2.1B SELECT RECORDS FROM EMPLOYEE TABLE WHERE LAST NAME IS KING
SELECT *
FROM EMPLOYEE
WHERE LASTNAME = 'King';

--2.1C Select all records from the Employee table where first name is Andrew and REPORTSTO is NULL.
SELECT *
FROM EMPLOYEE
WHERE FIRSTNAME = 'Andrew' 
AND REPORTSTO IS NULL;

--2.1D Select all albums in Album table and sort result set in descending order by title.
SELECT *
FROM ALBUM
ORDER BY TITLE DESC;

--2.1E Select first name from Customer and sort result set in ascending order by city.
SELECT FIRSTNAME 
FROM CUSTOMER
ORDER BY CITY;

--2.1F Select all invoices with a billing address like “T%”
SELECT *
FROM INVOICE
WHERE BILLINGADDRESS LIKE 'T%';

--2.3A Insert two new records into Genre table
INSERT INTO GENRE VALUES (26, 'Parody');
INSERT INTO GENRE VALUES (27, 'Game OST');

--2.3B Insert two new records into Employee table
INSERT INTO EMPLOYEE VALUES (9, 'Sprake', 'Sprake', 'Accountant', 4	, DATE '2016-12-11', DATE '2019-01-22', '51338 Independence Alley', 'Salt Lake City', 'UT', 'United States', '84140', '801-383-2339', '910-892-1237', 'ksprake0@taobao.com');
INSERT INTO EMPLOYEE VALUES (10, 'Quinton', 'Gard', 'Nuclear Power Engineer', 9, DATE '2016-02-13', DATE '2018-02-05', '3145 Petterle Hill', 'Tulsa', 'OK', 'United States', '74149', '918-542-0724', '202-239-2951', 'gquinton1@typepad.com');

--2.3C Insert two new records into Customer table 
INSERT INTO CUSTOMER VALUES (60, 'Emanuele', 'Sandwich', 'Jetpulse', '6 Grayhawk Way', 'Nashville', 'TN', 'United States', '37228', '615-137-9913', '941-994-1194', 'esandwich0@shop-pro.jp', 2);
INSERT INTO CUSTOMER VALUES (61, 'Levin', 'Sudran', 'Eayo', '96053 Drewry Center', 'Oklahoma City', 'OK', 'United States', '73114', '405-759-0543', '434-142-7015', 'lsudran1@time.com', 6);

--2.4a Update Aaron Mitchell in Customer table to Robert Walter
UPDATE CUSTOMER 
SET FIRSTNAME = 'Robert', LASTNAME = 'Walter' 
WHERE FIRSTNAME = 'Aaron' AND LASTNAME = 'Mitchell';

--2.4b Update name of artist in the Artist table “Creedence Clearwater Revival” to “CCR”
UPDATE ARTIST
SET NAME = 'CCR'
WHERE NAME = 'Creedence Clearwater Revival';

--3.1a Create an inner join that joins customers and orders and specifies the name of the customer and the invoiceId.
SELECT CONCAT(C.FIRSTNAME, CONCAT(' ', C.LASTNAME)) AS CUSOTMER_NAME, I.INVOICEID AS INVOICE_ID
FROM CUSTOMER C, INVOICE I
WHERE C.CUSTOMERID = I.CUSTOMERID;

--3.2a Create an outer join that joins the customer and invoice table, specifying the CustomerId, firstname, lastname, invoiceId, and total.
SELECT C.CUSTOMERID, C.FIRSTNAME, C.LASTNAME, I.INVOICEID, I.TOTAL
FROM CUSTOMER C
FULL JOIN INVOICE I
ON C.CUSTOMERID = I.CUSTOMERID;

--3.3a Create a right join that joins album and artist specifying artist name and title.
SELECT AR.NAME, AL.TITLE
FROM ALBUM AL
RIGHT JOIN ARTIST AR
ON AL.ARTISTID = AR.ARTISTID;

--3.4a Create a cross join that joins album and artist and sorts by artist name in ascending order.
SELECT AR.*, AL.*
FROM ALBUM AL
CROSS JOIN ARTIST AR
ORDER BY AR.NAME;

--3.5a Perform a self-join on the employee table, joining on the reportsto column.
SELECT CONCAT(E1.FIRSTNAME, CONCAT(' ', E1.LASTNAME)) AS  EMPLOYEE_NAME, E2.REPORTSTO
FROM EMPLOYEE E1, EMPLOYEE E2
WHERE E1.EMPLOYEEID = E2.REPORTSTO;

--3.6a Create a query that shows the customer name with the total amount of money they have spent.
SELECT CONCAT(C.FIRSTNAME, CONCAT(' ', C.LASTNAME)) AS CUSTOMER_NAME, SUM(I.TOTAL)
FROM CUSTOMER C, INVOICE I
WHERE C.CUSTOMERID = I.CUSTOMERID
GROUP BY CONCAT(C.FIRSTNAME, CONCAT(' ', C.LASTNAME));

--3.6b Create a query that shows the employee that has made the highest number of sales (number of invoices).
SELECT CONCAT(E.FIRSTNAME, CONCAT(' ', E.LASTNAME)) AS EMPLOYEE_NAME
FROM EMPLOYEE E
JOIN CUSTOMER C
ON E.EMPLOYEEID = C.SUPPORTREPID 
JOIN INVOICE I
ON C.SUPPORTREPID = I.CUSTOMERID 
JOIN INVOICELINE IL
ON I.INVOICEID = IL.INVOICEID
group by CONCAT(E.FIRSTNAME, CONCAT(' ', E.LASTNAME))
ORDER BY SUM(IL.QUANTITY) DESC
FETCH NEXT 1 ROW ONLY;

--3.6c Create a query which shows the number of purchases per each genre. Display the name of each genre and number of purchases. Show the most popular genre first.
SELECT G.NAME AS GENERE, SUM(IL.QUANTITY) AS PURCHASE_NUM
FROM GENRE G
JOIN TRACK T
ON G.GENREID = T.GENREID
JOIN INVOICELINE IL
ON IL.TRACKID = T.TRACKID
GROUP BY G.NAME
ORDER BY SUM(IL.QUANTITY) DESC;

--output set up and test
SET SERVEROUTPUT ON;
BEGIN
    DBMS_OUTPUT.PUT_LINE('HELLO WORLD');
END;
/

--4.1a Create a function that returns the current time.
CREATE OR REPLACE FUNCTION GET_TIME
RETURN VARCHAR2
IS
BEGIN
    RETURN(TO_CHAR(CURRENT_TIMESTAMP, 'HH:MI:SSXFF'));
END;
/
--PRINTS GET_TIME() RETURN VAL
BEGIN
    DBMS_OUTPUT.PUT_LINE(GET_TIME());
END;
/

--4.1b create a function that returns the length of name in MEDIATYPE table
CREATE OR REPLACE FUNCTION NAME_LENGTH(INPUT_NAME VARCHAR2)
RETURN NUMBER
IS
BEGIN
    RETURN LENGTH(INPUT_NAME);
END;
/
SELECT NAME, NAME_LENGTH(NAME) AS NAME_LENGTH
FROM MEDIATYPE;

--4.2 a Create a function that returns the average total of all invoices 
CREATE OR REPLACE FUNCTION AVG_TOTAL
RETURN NUMBER
IS
AVG_INV INVOICE.TOTAL%TYPE;
BEGIN
    SELECT AVG(INVOICE.TOTAL) INTO AVG_INV
    FROM INVOICE;
    RETURN AVG_INV;
END;
/
BEGIN
    DBMS_OUTPUT.PUT_LINE(AVG_TOTAL());
END;
/
--4.2b Create a function that returns the most expensive track
CREATE OR REPLACE FUNCTION MAX_PRICE_TRACK
RETURN TRACK.NAME%TYPE
IS
MAX_TRACK_NAME TRACK.NAME%TYPE;
BEGIN
    SELECT TRACK.NAME INTO MAX_TRACK_NAME
    FROM TRACK
    WHERE TRACK.UNITPRICE =
        (SELECT MAX(TRACK.UNITPRICE)
        FROM TRACK)
    FETCH NEXT 1 ROW ONLY;
    RETURN MAX_TRACK_NAME;
END;
/
BEGIN
    DBMS_OUTPUT.PUT_LINE(MAX_PRICE_TRACK());
END;
/

--4.3a Create a function that returns the average price of invoiceline items in the invoiceline table
CREATE OR REPLACE FUNCTION AVG_PRICE
RETURN NUMBER
IS
AVG_OUTPUT NUMBER;
SUMMED NUMBER;
ROW_NUM NUMBER;
C SYS_REFCURSOR;
BEGIN
    SELECT SUM(UNITPRICE) INTO SUMMED
    FROM TRACK;
    SELECT COUNT(UNITPRICE) INTO ROW_NUM
    FROM TRACK;
    AVG_OUTPUT := SUMMED/ROW_NUM;
    RETURN AVG_OUTPUT;
END;
/
BEGIN
    DBMS_OUTPUT.PUT_LINE(AVG_PRICE());
END;
/

--4.4a Create a function that returns all employees who are born after 1968.
CREATE OR REPLACE FUNCTION BIRTH_AFTER_68
RETURN SYS_REFCURSOR
IS
DATELIST SYS_REFCURSOR;
BEGIN
    OPEN DATELIST FOR
        SELECT CONCAT(FIRSTNAME, CONCAT(' ', LASTNAME)) AS NAME
        FROM EMPLOYEE
        WHERE BIRTHDATE > DATE '1968-12-31';
        
    RETURN DATELIST;
END;
/
DECLARE
    DATELIST SYS_REFCURSOR;
    EMP_NAME EMPLOYEE.FIRSTNAME%TYPE;
BEGIN
    DATELIST := BIRTH_AFTER_68();
    LOOP
        FETCH DATELIST INTO EMP_NAME;
        EXIT WHEN DATELIST%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE(EMP_NAME);
    END LOOP;
END;
/

--5.1a Create a stored procedure that selects the first and last names of all the employees.
CREATE OR REPLACE PROCEDURE LIST_EMPLOYEES(EMP_NAME OUT SYS_REFCURSOR)
IS
BEGIN
    OPEN EMP_NAME FOR
        SELECT CONCAT(FIRSTNAME, CONCAT(' ', LASTNAME))
        FROM EMPLOYEE;
END;
/
--PRINTS PROCEDURE RESULTS
DECLARE 
    RETURN_NAME SYS_REFCURSOR;
    OUTPUT_NAME EMPLOYEE.FIRSTNAME%TYPE;
BEGIN
    LIST_EMPLOYEES(RETURN_NAME);
    LOOP
        FETCH RETURN_NAME INTO OUTPUT_NAME;
        EXIT WHEN RETURN_NAME%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE(OUTPUT_NAME);
    END LOOP;
END;
/

--5.2a Create a stored procedure that updates the personal information of an employee.
CREATE OR REPLACE PROCEDURE UPDATE_EMP(NEW_EMPLOYEEID IN EMPLOYEE.EMPLOYEEID%TYPE, NEW_LASTNAME IN EMPLOYEE.LASTNAME%TYPE, NEW_FIRSTNAME IN EMPLOYEE.FIRSTNAME%TYPE, 
NEW_TITLE IN EMPLOYEE.TITLE%TYPE, NEW_REPORTSTO IN EMPLOYEE.REPORTSTO%TYPE, NEW_BIRTHDATE IN EMPLOYEE.BIRTHDATE%TYPE, NEW_HIREDATE IN EMPLOYEE.HIREDATE%TYPE, 
NEW_ADDRESS IN EMPLOYEE.ADDRESS%TYPE, NEW_CITY IN EMPLOYEE.CITY%TYPE, NEW_STATE IN EMPLOYEE.STATE%TYPE, NEW_COUNTRY IN EMPLOYEE.COUNTRY%TYPE, NEW_POSTALCODE IN EMPLOYEE.POSTALCODE%TYPE,
NEW_PHONE IN EMPLOYEE.PHONE%TYPE, NEW_FAX IN EMPLOYEE.FAX%TYPE, NEW_EMAIL IN EMPLOYEE.EMAIL%TYPE)
IS
BEGIN
    UPDATE EMPLOYEE
    SET LASTNAME = NEW_LASTNAME, FIRSTNAME = NEW_FIRSTNAME, TITLE = NEW_TITLE, REPORTSTO = NEW_REPORTSTO, BIRTHDATE = NEW_BIRTHDATE, HIREDATE = NEW_HIREDATE,
    ADDRESS = NEW_ADDRESS, CITY = NEW_CITY, STATE = NEW_STATE, COUNTRY = NEW_COUNTRY, POSTALCODE = NEW_POSTALCODE, PHONE = NEW_PHONE, FAX = NEW_FAX, EMAIL = NEW_EMAIL
    WHERE EMPLOYEEID = NEW_EMPLOYEEID;
END;
/
BEGIN
    UPDATE_EMP(8, 'Smalley', 'Berry', 'Compensation Analyst', 1, DATE '1970-01-19', DATE '2005-05-02', '462 Pierstorff Park', 'Grande Prairie', 'Alberta', 'Canada', 'R3J', '744-138-6096', '175-658-6893', 'bsmalley0@twitter.com');
END;
/
ROLLBACK;

--5.2b Create a stored procedure that returns the managers of an employee.
CREATE OR REPLACE PROCEDURE FIND_MANAGER(EMP_ID IN EMPLOYEE.EMPLOYEEID%TYPE, MANAGER_NAME OUT EMPLOYEE.FIRSTNAME%TYPE)
IS
BEGIN
    SELECT CONCAT(FIRSTNAME, CONCAT(' ', LASTNAME)) INTO MANAGER_NAME
    FROM EMPLOYEE
    WHERE EMPLOYEEID = 
        (SELECT REPORTSTO
        FROM EMPLOYEE
        WHERE EMPLOYEEID = EMP_ID);
END;
/
DECLARE
    MANAGER_NAME EMPLOYEE.FIRSTNAME%TYPE;
BEGIN
    FIND_MANAGER(7, MANAGER_NAME);
    DBMS_OUTPUT.PUT_LINE(MANAGER_NAME);
END;
/

--5.3a Create a stored procedure that returns the name and company of a customer.
CREATE OR REPLACE PROCEDURE CUSTOMER_NAME_COMPANY(CUST_ID IN CUSTOMER.CUSTOMERID%TYPE, CUST_NAME OUT CUSTOMER.FIRSTNAME%TYPE, CUST_COMPANY OUT CUSTOMER.COMPANY%TYPE)
IS
BEGIN
    SELECT CONCAT(FIRSTNAME, CONCAT(' ', LASTNAME)), COMPANY INTO CUST_NAME, CUST_COMPANY
    FROM CUSTOMER
    WHERE CUSTOMERID = CUST_ID;
END;
/
DECLARE
    OUTPUT_NAME CUSTOMER.FIRSTNAME%TYPE;
    OUTPUT_COMP CUSTOMER.COMPANY%TYPE;
BEGIN
    CUSTOMER_NAME_COMPANY(17, OUTPUT_NAME, OUTPUT_COMP);
    DBMS_OUTPUT.PUT_LINE(CONCAT(OUTPUT_NAME, CONCAT(', ', OUTPUT_COMP)));
END;
/

--6.0a Create a transaction that given a invoiceId will delete that invoice (There may be constraints that rely on this, find out how to resolve them).
CREATE OR REPLACE PROCEDURE DEL_BY_ID(INV_ID IN INVOICE.INVOICEID%TYPE)
IS
BEGIN
    DELETE FROM INVOICELINE 
    WHERE INVOICEID = INV_ID;
    DELETE FROM INVOICE
    WHERE INVOICEID = INV_ID;
END;
/
BEGIN
    DEL_BY_ID(113);
END;
/
ROLLBACK;

--6.0b Create a transaction nested within a stored procedure that inserts a new record in the Customer table
CREATE OR REPLACE PROCEDURE NEW_RECORD(NEW_CUSTOMERID IN CUSTOMER.CUSTOMERID%TYPE, NEW_FIRSTNAME IN CUSTOMER.FIRSTNAME%TYPE, NEW_LASTNAME IN CUSTOMER.LASTNAME%TYPE, 
NEW_COMPANY IN CUSTOMER.COMPANY%TYPE, NEW_ADDRESS IN CUSTOMER.ADDRESS%TYPE, NEW_CITY IN CUSTOMER.CITY%TYPE, NEW_STATE IN CUSTOMER.STATE%TYPE, NEW_COUNTRY IN CUSTOMER.COUNTRY%TYPE, 
NEW_POSTALCODE IN CUSTOMER.POSTALCODE%TYPE, NEW_PHONE IN CUSTOMER.PHONE%TYPE, NEW_FAX IN CUSTOMER.FAX%TYPE, NEW_EMAIL IN CUSTOMER.EMAIL%TYPE, NEW_SUPPORTREPID IN CUSTOMER.SUPPORTREPID%TYPE)
IS
BEGIN
    INSERT INTO CUSTOMER VALUES (NEW_CUSTOMERID, NEW_FIRSTNAME, NEW_LASTNAME, NEW_COMPANY, NEW_ADDRESS, NEW_CITY, NEW_STATE, 
    NEW_COUNTRY, NEW_POSTALCODE, NEW_PHONE, NEW_FAX, NEW_EMAIL, NEW_SUPPORTREPID);
END;
/
BEGIN
    NEW_RECORD(62, 'Agosto', 'Ferenczi', 'Babbleopia', '743 Larry Parkway', 'Vidual', 'Coimbra', 'Portugal', '3220-350', '690-599-5050', '847-913-4743', 'aferenczi0@godaddy.com', 6);
END;
/
ROLLBACK;

--7.1a Create an after insert trigger on the employee table fired after a new record is inserted into the table.
CREATE OR REPLACE TRIGGER TR_INSERT_EMPLOYEE
AFTER INSERT ON EMPLOYEE
FOR EACH ROW
BEGIN
    DBMS_OUTPUT.PUT_LINE('TR_INSERT_EMPLOYEE TRIGGERED');
END;
/
BEGIN
     INSERT INTO EMPLOYEE VALUES (11, 'Smalley', 'Berry', 'Compensation Analyst', 1, DATE '1970-01-19', DATE '2005-05-02', '462 Pierstorff Park', 'Grande Prairie', 'Alberta', 'Canada', 'R3J', '744-138-6096', '175-658-6893', 'bsmalley0@twitter.com');
END;
/
ROLLBACK;

--7.1b Create an after update trigger on the album table that fires after a row is inserted in the table 
CREATE OR REPLACE TRIGGER TR_UPDATE_ALBUM
AFTER UPDATE ON ALBUM
FOR EACH ROW
BEGIN
    DBMS_OUTPUT.PUT_LINE('TR_UPDATE_ALBUM TRIGGERED');
END;
/
BEGIN
     UPDATE ALBUM
     SET TITLE = 'DEPONIA OST'
     WHERE ALBUMID = 226;
END;
/
ROLLBACK;

--7.1c Create an after delete trigger on the customer table that fires after a row is deleted from the table.
CREATE OR REPLACE TRIGGER TR_DELETE_CUSTOMER
AFTER DELETE ON CUSTOMER
FOR EACH ROW
BEGIN
    DBMS_OUTPUT.PUT_LINE('TR_DELETE_CUSTOMER TRIGGERED');
END;
/
BEGIN
     DELETE FROM CUSTOMER
     WHERE CUSTOMERID = 1;
END;
/
ROLLBACK;