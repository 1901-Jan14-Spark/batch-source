/*
Kevin Tran Huu - SQL EXERCISE
*/

CREATE TABLE CUSTOMER(
CUST_ID NUMBER(5) PRIMARY KEY,
CUST_FIRSTNAME VARCHAR2(20),
CUST_LASTNAME VARCHAR2(20),
CUST_DOB DATE
);

CREATE TABLE invoice( 
IN_ID NUMBER(5) CONSTRAINT PK_INVOICE PRIMARY KEY,
IN_DATE DATE,
CUST_ID NUMBER(5) CONSTRAINT FK_CUSTOMER REFERENCES CUSTOMER,
IN_AMOUNT NUMBER(5,2)
);

INSERT INTO CUSTOMER VALUES(1, 'Kevin', 'Tran Huu', DATE '1994-01-01');
INSERT INTO CUSTOMER VALUES(2, 'Andrew', 'Ha', DATE '1993-01-01');
INSERT INTO CUSTOMER VALUES(3, 'Kelby', 'Behounek', DATE '1991-01-01');
INSERT INTO CUSTOMER VALUES(4, 'Agilay', 'Dones', DATE '1994-01-01');
INSERT INTO CUSTOMER VALUES(5, 'David', 'Van Alstine', DATE '1995-01-01');

INSERT INTO INVOICE VALUES(1, DATE '2019-01-01', 1, 399.25 );
INSERT INTO INVOICE VALUES(2, DATE '2019-02-02', 2, 999.25 );
INSERT INTO INVOICE VALUES(3, DATE '2019-03-03', 3, 259.25 );
INSERT INTO INVOICE VALUES(4, DATE '2019-04-04', 4, 893.21 );
INSERT INTO INVOICE VALUES(5, DATE '2019-05-05', 5, 10.25 );
INSERT INTO INVOICE VALUES(6, DATE '2019-06-06', 1, 625.70 );
INSERT INTO INVOICE VALUES(7, DATE '2019-07-07', 2, 3 );
INSERT INTO INVOICE VALUES(8, DATE '2019-08-08', 3, 35.75 );
INSERT INTO INVOICE VALUES(9, DATE '2019-09-09', 4, 346.98 );
INSERT INTO INVOICE VALUES(10, DATE '2019-10-10', 5, 654.21 );

UPDATE INVOICE
SET cust_id = 3
WHERE IN_ID = 7;


UPDATE INVOICE
SET cust_id = 3
WHERE IN_ID = 10;

UPDATE INVOICE
SET IN_DATE = TRUNC(current_date)
WHERE IN_ID = 7;

UPDATE INVOICE
SET IN_DATE = TRUNC(current_date)
WHERE IN_ID = 8;

UPDATE CUSTOMER
SET CUST_FIRSTNAME = 'Kalby'
WHERE CUST_FIRSTNAME = 'Kelby';

DELETE INVOICE
WHERE in_amount > 800;

-- Show today's purchases
SELECT *
FROM INVOICE
WHERE in_date = TRUNC(current_date);

-- Show each customer 
SELECT  cust_id AS CUST_ID, COUNT(IN_ID) AS NUM_PURCHASE
FROM INVOICE
GROUP BY CUST_ID;

-- Show each customer and total cost of purchase
SELECT  cust_id AS CUST_ID, SUM(IN_AMOUNT) AS PRICE
FROM INVOICE
GROUP BY CUST_ID;

-- Show all purchases from the last month
SELECT IN_ID, IN_AMOUNT
FROM invoice
where IN_DATE > ADD_MONTHS(TRUNC(CURRENT_DATE),-1) AND IN_DATE <= TRUNC(CURRENT_DATE)
ORDER BY IN_AMOUNT DESC;

-- Show top three most expensive purchases
--SELECT IN_AMOUNT
--FROM INVOICE
--ORDER BY in_amount DESC
--FETCH FIRST 3 ROWS ONLY;
SELECT IN_AMOUNT
FROM (SELECT IN_AMOUNT FROM INVOICE ORDER BY IN_AMOUNT DESC)
WHERE ROWNUM <=3;