/*2.1 SELECT*/
SELECT * FROM CHINOOK.EMPLOYEE;
SELECT * FROM CHINOOK.EMPLOYEE  WHERE LASTNAME = 'King';
SELECT * FROM CHINOOK.EMPLOYEE  WHERE FIRSTNAME= 'Andrew';
SELECT * FROM CHINOOK.ALBUM ORDER BY title DESC; 
SELECT CUSTOMER.FIRSTNAME,CUSTOMER.CITY FROM CHINOOK.CUSTOMER ORDER BY city ASC;
SELECT * FROM CHINOOK.INVOICE WHERE billingaddress LIKE 'T%';
/*2.3 INSERT INTO*/
INSERT INTO CHINOOK.GENRE VALUES (26,'WORLD');
INSERT INTO CHINOOK.GENRE VALUES (27,'Rap');
INSERT INTO CHINOOK.EMPLOYEE VALUES (9,'John','Niel','IT Admin',null,'14-FEB-88','18-AUG-07', '11540 Sheridan Ave NW','Chicago',	'IL', 'USA', '60630','+1 (773) 468-9872','+1 (773) 468-9873','johnniel@chinookcorp.com');
INSERT INTO CHINOOK.EMPLOYEE VALUES (10,'James','Caplan','IT Network','','19-NOV-79','19-JAN-05', '4014 Pulaski Ave NS','Chicago',	'IL', 'USA', '60640','+1 (312) 555-7072','+1 (312) 555-7073','jamesCaplan@chinookcorp.com');
INSERT INTO CHINOOK.CUSTOMER VALUES (60,'Nour','Deen','Yahoo Inc.','30670 Drive Circle','San Diago','CA','USA','95001','+1 (408) 966-8700','+1 (408) 966-8701','NourDeen@yahoo.com',4);
INSERT INTO CHINOOK.CUSTOMER VALUES (61,'Aicha','Gapaeva','Atos Inc.','11234 Factory Ave','Phoenix','AZ','USA','87901','+1 (480) 933-8902','+1 (480) 933-8903','AichaGapaeva@atos.com',2);
/*2.4 UPDATE*/
UPDATE CHINOOK.CUSTOMER SET FIRSTNAME = 'Robert', LASTNAME= 'Walter' WHERE LASTNAME = 'Mitchell';
UPDATE CHINOOK.ARTIST SET NAME = 'CCR' WHERE NAME = 'Creedence Clearwater Revival';
/*3.0 Joins*/
/*3.1 INNER*/
SELECT CUSTOMER.FIRSTNAME,CUSTOMER.LASTNAME,INVOICE.INVOICEID FROM CHINOOK.INVOICE INNER JOIN CHINOOK.CUSTOMER ON CUSTOMER.CUSTOMERID=INVOICE.CUSTOMERID;
/*3.2 OUTER*/
SELECT CUSTOMER.FIRSTNAME,CUSTOMER.LASTNAME, INVOICE.INVOICEID,INVOICE.TOTAL FROM CHINOOK.INVOICE FULL OUTER JOIN CHINOOK.CUSTOMER ON CUSTOMER.CUSTOMERID=INVOICE.CUSTOMERID;
/*3.3 RIGHT*/
SELECT ARTIST.NAME,ALBUM.TITLE FROM CHINOOK.ALBUM RIGHT JOIN CHINOOK.ARTIST ON ARTIST.ARTISTID=ALBUM.ARTISTID;
--3.4 CROSS--
SELECT ARTIST.*,ALBUM.* FROM CHINOOK.ALBUM CROSS JOIN CHINOOK.ARTIST ORDER BY ARTIST.NAME ASC;
--3.5 SELF--
SELECT CONCAT(E.LASTNAME,CONCAT(' ',E.FIRSTNAME)) AS FULLNAME, CONCAT(G.LASTNAME,CONCAT(' ',G.FIRSTNAME)) AS REPORTSTO_FULLNAME
FROM CHINOOK.EMPLOYEE E,CHINOOK.EMPLOYEE G
WHERE E.REPORTSTO=G.EMPLOYEEID;
-------------3.6 Joined Queries-----------------
--A--
SELECT CONCAT (CUSTOMER.FIRSTNAME,CONCAT(' ',CUSTOMER.LASTNAME)) AS FULLNAME, SUM(INVOICE.TOTAL) AS TOTAL
FROM CHINOOK.INVOICE JOIN CHINOOK.CUSTOMER 
ON CUSTOMER.CUSTOMERID = INVOICE.CUSTOMERID 
group by CONCAT (CUSTOMER.FIRSTNAME,CONCAT(' ',CUSTOMER.LASTNAME));
--B--
SELECT CONCAT (EMPLOYEE.FIRSTNAME,CONCAT(' ',EMPLOYEE.LASTNAME)) AS FULLNAME, COUNT(CUSTOMER.SUPPORTREPID) AS NUMBER_OF_INVOICES
FROM CHINOOK.CUSTOMER
INNER JOIN CHINOOK.INVOICE
ON INVOICE.CUSTOMERID = CUSTOMER.CUSTOMERID 
INNER JOIN CHINOOK.EMPLOYEE
ON CUSTOMER.SUPPORTREPID = EMPLOYEE.EMPLOYEEID
GROUP BY  CONCAT (EMPLOYEE.FIRSTNAME,CONCAT(' ',EMPLOYEE.LASTNAME)) ORDER BY NUMBER_OF_INVOICES DESC
FETCH FIRST ROW ONLY;
--C--
SELECT CHINOOK.GENRE.NAME, COUNT(INVOICELINE.INVOICEID) AS NUMBER_OF_PURCHASES
FROM CHINOOK.TRACK
INNER JOIN CHINOOK.INVOICELINE
ON TRACK.TRACKID = INVOICELINE.TRACKID 
INNER JOIN CHINOOK.GENRE
ON TRACK.GENREID = GENRE.GENREID
GROUP BY GENRE.NAME ORDER BY NUMBER_OF_PURCHASES DESC;
COMMIT;
-------------------4.0 SQL Functions-------------------------------
---4.1 System Defined Functions--
--A--
create or replace function getSysdate
return VARCHAR is
begin
  return CURRENT_TIMESTAMP ;
end;
/
select getSysdate() from dual;
--B--
create or replace function LengthOfWord( I VARCHAR)
RETURN NUMBER IS
BEGIN
RETURN LENGTH(I);
END;
/
 
SELECT MEDIATYPE.NAME, LengthOfWord(MEDIATYPE.NAME) AS LengthOfWord
    from CHINOOK.MEDIATYPE;

-----4.2 System Defined Aggregate Functions--
--A--
create or replace function AverageOfTotal
RETURN NUMBER IS
X NUMBER;
BEGIN
SELECT ROUND(AVG(TOTAL),2)INTO X
FROM CHINOOK.invoice;
RETURN X;
END;
/
 
SELECT AverageOfTotal AS AVERAGEOfSUM FROM DUAL;
---B---
create or replace function MaxTrack
RETURN NUMBER IS
X NUMBER;
BEGIN
SELECT MAX(UNITPRICE)INTO X
FROM CHINOOK.TRACK;
RETURN X;
END;
/
 
SELECT MaxTrack AS MAXTRACK FROM DUAL;
---4.3 User Defined Scalar Functions---
create or replace function AverageOfInvoiceLine
RETURN NUMBER IS
X NUMBER;
BEGIN
SELECT ROUND(AVG(UNITPRICE),2)INTO X
FROM CHINOOK.INVOICELINE;
RETURN X;
END;
/
 
SELECT AverageOfInvoiceLine AS AvgOfInvoiceLine FROM DUAL;
-----4.4 User Defined Table Valued Functions---
create or replace function bornAfter1968
RETURN  SYS_REFCURSOR
IS X SYS_REFCURSOR;
BEGIN
for row in (SELECT FIRSTNAME, LASTNAME FROM CHINOOK.EMPLOYEE)
loop
    dbms_output.put_line(row.FIRSTNAME||' '||row.LASTNAME);
end loop;
OPEN X FOR
SELECT EMPLOYEE.FIRSTNAME,EMPLOYEE.LASTNAME,EMPLOYEE.BIRTHDATE FROM CHINOOK.EMPLOYEE WHERE EMPLOYEE.BIRTHDATE > DATE '1968-01-01' ;
RETURN X;
END;
/

DECLARE
  LOOPED  SYS_REFCURSOR:= bornAfter1968;
  l_FIRST_name  CHINOOK.EMPLOYEE.FIRSTNAME%TYPE;
  l_LAST_name  CHINOOK.EMPLOYEE.LASTNAME%TYPE;
  l_BIRTH_DAY CHINOOK.EMPLOYEE.BIRTHDATE%TYPE;

BEGIN
  loop
        fetch LOOPED into l_FIRST_name,l_LAST_name,l_BIRTH_DAY;
        exit when LOOPED%notfound;
        dbms_output.put_line('EmployeesBornAfter_1968: ' || l_FIRST_name||' '||l_LAST_name||' '||l_BIRTH_DAY);
    end loop;
    close LOOPED;
END;
----5.0 Stored Procedures---
--5.1 Basic Stored Procedure--
CREATE OR REPLACE PROCEDURE PRINTNAMES
IS
BEGIN
FOR ROW IN (SELECT FIRSTNAME, LASTNAME FROM CHINOOK.EMPLOYEE)
loop
    dbms_output.put_line(ROW.FIRSTNAME||' '||ROW.LASTNAME);
end loop;
END;
/

SET SERVEROUTPUT ON;
EXEC PRINTNAMES;
---5.2 Stored Procedure Input Parameters---
---A---
CREATE OR REPLACE PROCEDURE UPDATE_EMPLOYEE
IS
BEGIN
UPDATE CHINOOK.EMPLOYEE
SET TITLE ='SOFTWARE dev'
WHERE EMPLOYEEID=10;
END;
/

SET SERVEROUTPUT ON;
EXEC UPDATE_EMPLOYEE;

COMMIT;
---B--
CREATE OR REPLACE PROCEDURE GET_MANAGER(
E_EMPLOYEE_ID IN NUMBER,
E_MANAGER_LNAME OUT VARCHAR2,
E_MANAGER_FNAME OUT VARCHAR2)
IS
BEGIN
SELECT E.LASTNAME,E.FIRSTNAME
INTO E_MANAGER_LNAME,E_MANAGER_FNAME
FROM CHINOOK.EMPLOYEE E,CHINOOK.EMPLOYEE G
WHERE E.REPORTSTO=G.EMPLOYEEID AND E_EMPLOYEE_ID=E.EMPLOYEEID;
END;
/

SET SERVEROUTPUT ON;
DECLARE 
EMPLOYEE_ID NUMBER;
MANAGER_LNAME VARCHAR2(20);
MANAGER_FNAME VARCHAR2 (20);
BEGIN
EMPLOYEE_ID := 2;
GET_MANAGER(
EMPLOYEE_ID,
MANAGER_LNAME,
MANAGER_FNAME);
    dbms_output.put_line('EMPLOYEE '||EMPLOYEE_ID||' MANAGER IS '||MANAGER_LNAME||' '||MANAGER_FNAME);
END;
/
-------5.3 Stored Procedure Output Parameters----
CREATE OR REPLACE PROCEDURE GET_CUSTOMER_INFO(
E_CUSTOMER_ID IN NUMBER,
E_CUSTOMER_FIRSTNAME OUT VARCHAR2,
E_CUSTOMER_LASTNAME OUT VARCHAR2,
E_COMPANY_NAME OUT VARCHAR2)
IS
BEGIN
SELECT FIRSTNAME,LASTNAME,COMPANY
INTO E_CUSTOMER_FIRSTNAME,E_CUSTOMER_LASTNAME,E_COMPANY_NAME
FROM CHINOOK.CUSTOMER
WHERE E_CUSTOMER_ID = CUSTOMERID;
END;
/

SET SERVEROUTPUT ON;
DECLARE 
CUSTOMER_ID NUMBER;
CUSTOMER_FNAME VARCHAR2(40);
CUSTOMER_LNAME VARCHAR2 (20);
CUSTOMER_COMPANY VARCHAR2 (80);
BEGIN
CUSTOMER_ID := 3;
GET_CUSTOMER_INFO(
CUSTOMER_ID,
CUSTOMER_FNAME,
CUSTOMER_LNAME,
CUSTOMER_COMPANY);

    dbms_output.put_line('CUSTOMER '||CUSTOMER_ID||' IS: '||CUSTOMER_LNAME||' '||CUSTOMER_FNAME||' COMPANY IS: '||CUSTOMER_COMPANY);
END;
/
---6.0 Transactions--
--A--
ALTER TABLE CHINOOK.INVOICELINE DROP CONSTRAINT FK_INVOICELINEINVOICEID;
ALTER TABLE CHINOOK.INVOICE DROP CONSTRAINT FK_INVOICECUSTOMERID;

CREATE OR REPLACE PROCEDURE DELETE_INVOICE(X NUMBER)
IS
BEGIN
DELETE FROM CHINOOK.INVOICE
    WHERE INVOICEID = X;
END;
/

SET SERVEROUTPUT ON;
EXEC DELETE_INVOICE(14)

ROLLBACK;

--B
CREATE OR REPLACE PROCEDURE INSERT_CUSTOMER(CUSTID NUMBER,FNAME VARCHAR2,LNAME VARCHAR2,COMPANY VARCHAR2,ADDRESS VARCHAR2, CITY VARCHAR2,STATE VARCHAR2,COUNTRY VARCHAR2,POSTALCODE VARCHAR2,PHONE VARCHAR2,FAX VARCHAR2,EMAIL VARCHAR2,SUPPORTREPID NUMBER)
IS
BEGIN
 insert into CHINOOK.CUSTOMER
    values (CUSTID,FNAME,LNAME,COMPANY,ADDRESS, CITY,STATE,COUNTRY,POSTALCODE,PHONE,FAX,EMAIL,SUPPORTREPID);
END;
/

SET SERVEROUTPUT ON;
EXEC INSERT_CUSTOMER(92,'YOUNESS','WARDAOUI','IT SOLUTION','4443 N Sheridan RD','Chicago','IL','USA','60630','+1 (773) 468-3443','+1 (773) 468-3444','wyouness@aol.com',5);

----7.0 Triggers---
--7.1 AFTER/FOR--
SET SERVEROUTPUT ON;
CREATE OR REPLACE TRIGGER EMPLOYEE_TRIGGER
BEFORE INSERT ON CHINOOK.EMPLOYEE
FOR EACH ROW
ENABLE
BEGIN
 DBMS_OUTPUT.PUT_LINE('A Row Was Just Inserted'); 
END;
/
--TESTING---
INSERT INTO CHINOOK.EMPLOYEE VALUES (98,'Jo','el','IT Admin',null,'14-FEB-88','18-AUG-07', '115 Sheridan RD','Chicago',	'IL', 'USA', '60630','+1 (773) 468-9872','+1 (773) 468-9873','johnniel@chinookcorp.com');

---B---
SET SERVEROUTPUT ON;
CREATE OR REPLACE TRIGGER UPDATE_TRIGGER
BEFORE UPDATE ON CHINOOK.ALBUM
FOR EACH ROW
ENABLE
BEGIN
 DBMS_OUTPUT.PUT_LINE('A Row Was Just Updated '); 
END;
/

UPDATE CHINOOK.ALBUM SET TITLE = 'ONE LOVE' WHERE ALBUMID= 5;

--C--
SET SERVEROUTPUT ON;
CREATE OR REPLACE TRIGGER DELETE_TRIGGER
BEFORE DELETE ON CHINOOK.CUSTOMER
FOR EACH ROW
ENABLE
BEGIN
 DBMS_OUTPUT.PUT_LINE('A Row Was Just Deleted'); 
END;
/

DELETE FROM CHINOOK.CUSTOMER WHERE CUSTOMERID= 92;