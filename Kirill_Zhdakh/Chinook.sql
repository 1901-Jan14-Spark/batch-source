SET SERVEROUTPUT ON;

--2.1 SELECT--

--A
SELECT * FROM CHINOOK.EMPLOYEE;

--B
SELECT * FROM CHINOOK.EMPLOYEE CE
WHERE CE.LASTNAME = 'King';

--C
SELECT * FROM CHINOOK.EMPLOYEE CE
WHERE CE.FIRSTNAME = 'Andrew'
AND CE.REPORTSTO IS NULL;

--D
SELECT * FROM CHINOOK.ALBUM CA
ORDER BY CA.TITLE DESC;

--E
SELECT CC.FIRSTNAME FROM CHINOOK.CUSTOMER CC
ORDER BY CC.CITY;

--F
SELECT * FROM CHINOOK.INVOICE CI
WHERE SUBSTR(CI.BILLINGADDRESS, 1, 1) = 'T';

--2.2 INSERT INTO--

--A
INSERT INTO CHINOOK.GENRE VALUES (1000, 'Gorecore');
INSERT INTO CHINOOK.GENRE VALUES (1001, 'Nightcore');

--B
INSERT INTO CHINOOK.EMPLOYEE values (3234, 'Lossman', 'Liam', 'VP Quality Control', NULL, '04-Oct-1993', '01-Oct-2007', '07 Oakridge Lane', 'South Bend', 'Indiana', 'United States', '46620', '+1 (574) 715-8987', '+1 (513) 489-4955', 'llossman0@auda.org.au'); 
INSERT INTO CHINOOK.EMPLOYEE values (2313, 'Fleeming', 'Hastie', 'Assistant Media Planner', NULL, '27-Jan-1995', '18-Jan-2007', '91 New Castle Terrace', 'Denver', 'Colorado', 'United States', '80249', '+1 (303) 298-5155', '+1 (253) 114-4623', 'hfleeming1@list-manage.com');

--C
INSERT INTO CHINOOK.CUSTOMER values (6743, 'Brad', 'York', 'VP Quality Control', '07 Oakridge Lane', 'South Bend', 'Indiana', 'United States', '46620', '+1 (574) 715-8987', '+1 (513) 489-4955', 'llossman0@auda.org.au', 3); 
INSERT INTO CHINOOK.CUSTOMER values (9723, 'Tripp', 'Tork', 'Assistant Media Planner','91 New Castle Terrace', 'Denver', 'Colorado', 'United States', '80249', '+1 (303) 298-5155', '+1 (253) 114-4623', 'hfleeming1@list-manage.com', 5);

--3.1 INNER JOIN--

--A
SELECT CI.INVOICEID AS INVOICEID, CC.FIRSTNAME||' '||CC.LASTNAME AS FULLNAME
FROM CHINOOK.INVOICE CI
JOIN CHINOOK.CUSTOMER CC
ON CI.CUSTOMERID = CC.CUSTOMERID;

--3.2 OUTER--

--A
SELECT CC.CUSTOMERID AS CUSTOMERID, CC.FIRSTNAME||' '||CC.LASTNAME AS FULLNAME, CI.INVOICEID AS INVOICEID, CI.TOTAL AS TOTAL
FROM CHINOOK.CUSTOMER CC
FULL JOIN CHINOOK.INVOICE CI
ON CC.CUSTOMERID = CI.CUSTOMERID;


--3.3 RIGHT--

--A
SELECT CART.NAME AS ARTISTNAME, CALB.TITLE AS ALBUMTITLE
FROM CHINOOK.ARTIST CART
RIGHT JOIN CHINOOK.ALBUM CALB
ON CART.ARTISTID = CALB.ARTISTID;

--3.4 CROSS--

--A
SELECT CALB.*, CART.*
FROM CHINOOK.ALBUM CALB
CROSS JOIN CHINOOK.ARTIST CART
ORDER BY CART.NAME;

--3.5 SELF--

--A
SELECT CE.*, CE2.REPORTSTO
FROM CHINOOK.EMPLOYEE CE, CHINOOK.EMPLOYEE CE2
WHERE CE.EMPLOYEEID = CE2.EMPLOYEEID;

--3.6 JOINED QUERIES--

--A
SELECT CC.FIRSTNAME||' '||CC.LASTNAME AS FULL_NAME, SUM(CI.TOTAL) AS TOTAL
FROM CHINOOK.CUSTOMER CC
JOIN CHINOOK.INVOICE CI
ON CC.CUSTOMERID = CI.CUSTOMERID 
GROUP BY CC.FIRSTNAME||' '||CC.LASTNAME
ORDER BY TOTAL DESC;

--B
SELECT CE.FIRSTNAME||' '||CE.LASTNAME AS FULL_NAME, COUNT(CI.INVOICEID) AS TOTAL
FROM CHINOOK.EMPLOYEE CE
JOIN CHINOOK.CUSTOMER CC
ON CE.EMPLOYEEID = CC.SUPPORTREPID
JOIN CHINOOK.INVOICE CI
ON CC.CUSTOMERID = CI.CUSTOMERID 
GROUP BY CE.FIRSTNAME||' '||CE.LASTNAME
ORDER BY TOTAL DESC
FETCH FIRST ROW ONLY;

--C
SELECT CG.NAME AS GENRE, COUNT(CI.INVOICEID) AS PURCHASE_COUNT
FROM CHINOOK.GENRE CG
JOIN CHINOOK.TRACK CT
ON CG.GENREID = CT.GENREID 
JOIN CHINOOK.INVOICELINE CIL
ON CT.TRACKID = CIL.TRACKID
JOIN CHINOOK.INVOICE CI
ON CIL.INVOICEID = CI.INVOICEID
JOIN CHINOOK.CUSTOMER CC
ON CI.CUSTOMERID = CC.CUSTOMERID
GROUP BY CG.NAME
ORDER BY PURCHASE_COUNT DESC;

--4.1 SYSTEM DEFINED FUNCTIONS--

--A
--SELECT TO_CHAR
--(SYSDATE, 'HH12:MI:SS') AS CURRENT_TIME
--FROM DUAL;
CREATE OR REPLACE FUNCTION GET_TIME
RETURN VARCHAR
IS
TIME VARCHAR(10);
BEGIN
    SELECT TO_CHAR(SYSDATE, 'HH12:MI:SS')
    INTO TIME
    FROM DUAL;
    RETURN TIME;
END;
/

BEGIN
    DBMS_OUTPUT.PUT_LINE(GET_TIME());
END;
/

--B
--SELECT SUM(LENGTH(M.NAME)) AS NAME_LENGTH
--FROM CHINOOK.MEDIATYPE M;
CREATE OR REPLACE FUNCTION GET_LENGTH(NAME VARCHAR)
RETURN NUMBER
IS
BEGIN
    RETURN LENGTH(NAME);
END;
/

BEGIN
    DBMS_OUTPUT.PUT_LINE(GET_LENGTH('JOHN'));
END;
/

--4.2 SYSTEM DEFINED AGGREGATE FUNCTIONS--

--A
--SELECT AVG(CI.TOTAL) AS TOTAL
--FROM CHINOOK.INVOICE CI;
CREATE OR REPLACE FUNCTION GET_AVERAGE
RETURN NUMBER
IS
AVERAGE NUMBER;
BEGIN
    SELECT AVG(CI.TOTAL)
    INTO AVERAGE
    FROM CHINOOK.INVOICE CI;
    RETURN AVERAGE;
END;
/

BEGIN
    DBMS_OUTPUT.PUT_LINE(GET_AVERAGE);
END;
/

--B
--SELECT MAX(CT.UNITPRICE) AS MAX
--FROM CHINOOK.TRACK CT;
CREATE OR REPLACE FUNCTION MAX_PRICE
RETURN NUMBER
IS
MAX_UNIT NUMBER;
BEGIN
    SELECT MAX(CT.UNITPRICE)
    INTO MAX_UNIT
    FROM CHINOOK.TRACK CT;
    RETURN MAX_UNIT;
END;
/

BEGIN
    DBMS_OUTPUT.PUT_LINE(MAX_PRICE);
END;
/

--4.3 USER DEFINED SCALAR FUNCTIONS--

--A
CREATE OR REPLACE FUNCTION AVERAGE_PRICE
RETURN NUMBER
IS
AVRG NUMBER;
BEGIN
    SELECT AVG(CIL.UNITPRICE)
    INTO AVRG
    FROM CHINOOK.INVOICELINE CIL;
    RETURN AVRG;
END;
/

BEGIN
    DBMS_OUTPUT.PUT_LINE(AVERAGE_PRICE());
END;
/

--B
CREATE OR REPLACE FUNCTION DATE_AFTER
RETURN SYS_REFCURSOR
IS
CRSR SYS_REFCURSOR;
BEGIN
    OPEN CRSR FOR
    SELECT CE.FIRSTNAME||' '||CE.LASTNAME AS FULL_NAME, CE.BIRTHDATE AS BIRTHDATE
    FROM CHINOOK.EMPLOYEE CE
    WHERE EXTRACT(YEAR FROM CE.BIRTHDATE) > '1968';
    RETURN CRSR;
END;
/

DECLARE
    CRSR SYS_REFCURSOR;
    TEMP_FULLNAME VARCHAR(32);
    TEMP_DATE CHINOOK.EMPLOYEE.BIRTHDATE%TYPE;
BEGIN
    CRSR := DATE_AFTER();
    LOOP
        FETCH CRSR INTO TEMP_FULLNAME, TEMP_DATE;
        EXIT WHEN CRSR%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE('NAME: '||TEMP_FULLNAME||' '||'DATE: '||' '||TEMP_DATE);
    END LOOP;
    CLOSE CRSR;
END;
/

--5.1 BASIC STORED PROCEDURE--

--A
CREATE OR REPLACE PROCEDURE GET_EMPLOYEE_NAMES(CRSR OUT SYS_REFCURSOR)
IS
BEGIN
    OPEN CRSR FOR
    SELECT CE.FIRSTNAME, CE.LASTNAME
    FROM CHINOOK.EMPLOYEE CE;
END;
/

DECLARE
    CRSR SYS_REFCURSOR;
    TEMP_FIRSTNAME CHINOOK.EMPLOYEE.FIRSTNAME%TYPE;
    TEMP_LASTNAME CHINOOK.EMPLOYEE.LASTNAME%TYPE;
BEGIN
    GET_EMPLOYEE_NAMES(CRSR);
    LOOP
        FETCH CRSR INTO TEMP_FIRSTNAME, TEMP_LASTNAME;
        EXIT WHEN CRSR%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE('FIRSTNAME: '||TEMP_FIRSTNAME||' '||'LASTNAME: '||TEMP_LASTNAME);
    END LOOP;
    CLOSE CRSR;
END;
/

--5.2 STORED PROCEDURE INPUT PARAMETERS--

--A
CREATE OR REPLACE PROCEDURE UPDATE_NAME(EMP_ID IN CHINOOK.EMPLOYEE.EMPLOYEEID%TYPE, FIRSTNAME IN CHINOOK.EMPLOYEE.FIRSTNAME%TYPE, LASTNAME IN CHINOOK.EMPLOYEE.LASTNAME%TYPE)
IS
BEGIN
    UPDATE CHINOOK.EMPLOYEE
    SET CHINOOK.EMPLOYEE.FIRSTNAME = FIRSTNAME, CHINOOK.EMPLOYEE.LASTNAME = LASTNAME
    WHERE CHINOOK.EMPLOYEE.EMPLOYEEID = EMP_ID;  
END;
/

BEGIN
    UPDATE_NAME(1, 'Bob', 'Ross');
    UPDATE_NAME(2, 'Rick', 'Ross');
    UPDATE_NAME(3, 'Trevor', 'Scott');
END;
/

--B
CREATE OR REPLACE PROCEDURE GET_MANAGERS(EMP_ID IN CHINOOK.EMPLOYEE.EMPLOYEEID%TYPE, CRSR OUT SYS_REFCURSOR)
IS
BEGIN
    OPEN CRSR FOR
    SELECT CE.FIRSTNAME||' '||CE.LASTNAME AS EMPLOYEE, CE2.FIRSTNAME||' '||CE2.LASTNAME AS MANAGER
    FROM CHINOOK.EMPLOYEE CE, CHINOOK.EMPLOYEE CE2
    WHERE EMP_ID = CE.EMPLOYEEID AND CE.REPORTSTO = CE2.EMPLOYEEID;
END;
/

DECLARE
    CRSR SYS_REFCURSOR;
    FULL_NAME_EMPLOYEE VARCHAR(32);
    FULL_NAME_MANAGER VARCHAR(32);
BEGIN
    GET_MANAGERS(2, CRSR);
    LOOP
        FETCH CRSR INTO FULL_NAME_EMPLOYEE, FULL_NAME_MANAGER;
        EXIT WHEN CRSR%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE('EMPLOYEE: '||FULL_NAME_EMPLOYEE||' '||'MANAGER: '||FULL_NAME_MANAGER);
    END LOOP;
    CLOSE CRSR;
END;
/

--5.3 STORED PROCEDURE OUTPUT PARAMETERS--
CREATE OR REPLACE PROCEDURE GET_NAME_COMP(CRSR OUT SYS_REFCURSOR)
IS
BEGIN
    OPEN CRSR FOR
    SELECT CC.FIRSTNAME||' '||CC.LASTNAME AS FULL_NAME, CC.COMPANY AS COMPANY
    FROM CHINOOK.CUSTOMER CC;
END;
/

DECLARE
    CRSR SYS_REFCURSOR;
    TEMP_FULLNAME VARCHAR(32);
    TEMP_COMPANY CHINOOK.CUSTOMER.COMPANY%TYPE;
BEGIN
    GET_NAME_COMP(CRSR);
    LOOP
        FETCH CRSR INTO TEMP_FULLNAME, TEMP_COMPANY;
        EXIT WHEN CRSR%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE('NAME: '||TEMP_FULLNAME||' '||'COMPANY: '||TEMP_COMPANY);
    END LOOP;
    CLOSE CRSR;
END;
/

--6.0 TRANSACTIONS--









